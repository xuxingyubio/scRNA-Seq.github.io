{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u57fa\u4e8escRNA-Seq\u7814\u7a76\u7259\u5468\u708e 19230111 \u5f90\u661f\u96e8 \u80cc\u666f\u77e5\u8bc6 \u53e3\u8154\u7c98\u819c\u662f\u4eba\u4f53\u5185\u5206\u88c2\u6700\u5feb\u7684\u7ec4\u7ec7\u4e4b\u4e00\uff0c\u662f\u62b5\u5fa1\u53e3\u8154\u75be\u75c5\u53d1\u5c55\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u3002\u7259\u9f88\u662f\u5305\u56f4\u7259\u9f7f\u9888\u90e8\u7684\u53e3\u8154\u7c98\u819c\uff0c\u7531\u89d2\u8d28\u5316\u7684\u590d\u5c42\u9cde\u72b6\u4e0a\u76ae\u548c\u4e0b\u5c42\u7ed3\u7f14\u7ec4\u7ec7\u7ec4\u6210\uff0c\u5728\u5065\u5eb7\u548c\u5e94\u5bf9\u673a\u68b0\u548c\u5fae\u751f\u7269\u6311\u6218\u65f6\u5171\u540c\u534f\u8c03\u7ec4\u7ec7\u5185\u7a33\u6001\u3002 \u7259\u5468\u75c5\u662f\u4e00\u79cd\u6162\u6027\u708e\u75c7\u6027\u75be\u75c5\uff0c\u4e0e\u5171\u751f\u53e3\u8154\u5fae\u751f\u7269\u7fa4\u548c\u5bbf\u4e3b\u514d\u75ab\u9632\u5fa1\u7cfb\u7edf\u7684\u5931\u8c03\u6709\u5173\uff0c\u5bfc\u81f4\u7259\u9f7f\u8f6f\u786c\u652f\u6301\u7ec4\u7ec7\u7684\u4e0d\u53ef\u9006\u7834\u574f\u3002\u7259\u9f88\u708e\u662f\u4e00\u79cd\u8f7b\u5fae\u4e14\u53ef\u9006\u7684\u7259\u9f88\u708e\u75c7\uff0c\u4e0d\u4f1a\u6c38\u4e45\u6027\u635f\u5bb3\u652f\u6301\u7259\u9f7f\u7684\u7ec4\u7ec7\u7684\u5b8c\u6574\u6027\u3002\u5f53\u672a\u7ecf\u6cbb\u7597\u7684\u7259\u9f88\u708e\u53d1\u5c55\u5230\u7259\u9f88\u3001\u9aa8\u548c\u97e7\u5e26\u4e27\u5931\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6162\u6027\u7259\u5468\u708e\u3002 \u7ec4\u7ec7\u9a7b\u7559\u7ec6\u80de\u5728\u5148\u5929\u514d\u75ab\u3001\u514d\u75ab\u8c03\u8282\u548c\u4e0a\u76ae\u5c4f\u969c\u7ef4\u6301\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528 1 \u3002\u4f7f\u7528\u5355\u7ec6\u80deRNA\u6d4b\u5e8f\u6280\u672f\u5bf9\u4eba\u7c7b\u7259\u9f88\u8fdb\u884c\u65e0\u504f\u5206\u6790\uff0c\u5305\u62ec\u4e0a\u76ae\u7ec6\u80de\u3001\u95f4\u5145\u8d28\u7ec6\u80de\u548c\u514d\u75ab\u7ec6\u80de\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u63cf\u8ff0\u75be\u75c5\u8fdb\u5c55\u7684\u52a8\u529b\u5b66\u7279\u5f81\uff0c\u4f7f\u7528\u4e86\u4ece\u5065\u5eb7\u548c\u60a3\u75c5\u60a3\u8005\u4e2d\u5206\u79bb\u7684\u6837\u672c\u3002\u4f7f\u7528\u5355\u7ec6\u80de\u5206\u6790\u786e\u5b9a\u4e86\u7259\u9f88\u7ec4\u7ec7\u5185\u7ec6\u80de\u4e9a\u7fa4\u7ec4\u6210\u7684\u5dee\u5f02\uff0c\u4ee5\u53ca\u5065\u5eb7\u548c\u60a3\u75c5\u60a3\u8005\u6837\u672c\u4e4b\u95f4\u8f6c\u5f55\u7ec4\u7684\u53d8\u5316\uff0c\u7528\u4e8e\u53d1\u73b0\u8fd9\u4e9b\u53d8\u5316\u4e0e\u8fdb\u5c55\u6027\u75be\u75c5\u72b6\u6001\u7684\u8054\u7cfb\u3002","title":"Background"},{"location":"#scrna-seq","text":"19230111 \u5f90\u661f\u96e8","title":"\u57fa\u4e8escRNA-Seq\u7814\u7a76\u7259\u5468\u708e"},{"location":"#_1","text":"\u53e3\u8154\u7c98\u819c\u662f\u4eba\u4f53\u5185\u5206\u88c2\u6700\u5feb\u7684\u7ec4\u7ec7\u4e4b\u4e00\uff0c\u662f\u62b5\u5fa1\u53e3\u8154\u75be\u75c5\u53d1\u5c55\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u3002\u7259\u9f88\u662f\u5305\u56f4\u7259\u9f7f\u9888\u90e8\u7684\u53e3\u8154\u7c98\u819c\uff0c\u7531\u89d2\u8d28\u5316\u7684\u590d\u5c42\u9cde\u72b6\u4e0a\u76ae\u548c\u4e0b\u5c42\u7ed3\u7f14\u7ec4\u7ec7\u7ec4\u6210\uff0c\u5728\u5065\u5eb7\u548c\u5e94\u5bf9\u673a\u68b0\u548c\u5fae\u751f\u7269\u6311\u6218\u65f6\u5171\u540c\u534f\u8c03\u7ec4\u7ec7\u5185\u7a33\u6001\u3002 \u7259\u5468\u75c5\u662f\u4e00\u79cd\u6162\u6027\u708e\u75c7\u6027\u75be\u75c5\uff0c\u4e0e\u5171\u751f\u53e3\u8154\u5fae\u751f\u7269\u7fa4\u548c\u5bbf\u4e3b\u514d\u75ab\u9632\u5fa1\u7cfb\u7edf\u7684\u5931\u8c03\u6709\u5173\uff0c\u5bfc\u81f4\u7259\u9f7f\u8f6f\u786c\u652f\u6301\u7ec4\u7ec7\u7684\u4e0d\u53ef\u9006\u7834\u574f\u3002\u7259\u9f88\u708e\u662f\u4e00\u79cd\u8f7b\u5fae\u4e14\u53ef\u9006\u7684\u7259\u9f88\u708e\u75c7\uff0c\u4e0d\u4f1a\u6c38\u4e45\u6027\u635f\u5bb3\u652f\u6301\u7259\u9f7f\u7684\u7ec4\u7ec7\u7684\u5b8c\u6574\u6027\u3002\u5f53\u672a\u7ecf\u6cbb\u7597\u7684\u7259\u9f88\u708e\u53d1\u5c55\u5230\u7259\u9f88\u3001\u9aa8\u548c\u97e7\u5e26\u4e27\u5931\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6162\u6027\u7259\u5468\u708e\u3002 \u7ec4\u7ec7\u9a7b\u7559\u7ec6\u80de\u5728\u5148\u5929\u514d\u75ab\u3001\u514d\u75ab\u8c03\u8282\u548c\u4e0a\u76ae\u5c4f\u969c\u7ef4\u6301\u4e2d\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528 1 \u3002\u4f7f\u7528\u5355\u7ec6\u80deRNA\u6d4b\u5e8f\u6280\u672f\u5bf9\u4eba\u7c7b\u7259\u9f88\u8fdb\u884c\u65e0\u504f\u5206\u6790\uff0c\u5305\u62ec\u4e0a\u76ae\u7ec6\u80de\u3001\u95f4\u5145\u8d28\u7ec6\u80de\u548c\u514d\u75ab\u7ec6\u80de\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u63cf\u8ff0\u75be\u75c5\u8fdb\u5c55\u7684\u52a8\u529b\u5b66\u7279\u5f81\uff0c\u4f7f\u7528\u4e86\u4ece\u5065\u5eb7\u548c\u60a3\u75c5\u60a3\u8005\u4e2d\u5206\u79bb\u7684\u6837\u672c\u3002\u4f7f\u7528\u5355\u7ec6\u80de\u5206\u6790\u786e\u5b9a\u4e86\u7259\u9f88\u7ec4\u7ec7\u5185\u7ec6\u80de\u4e9a\u7fa4\u7ec4\u6210\u7684\u5dee\u5f02\uff0c\u4ee5\u53ca\u5065\u5eb7\u548c\u60a3\u75c5\u60a3\u8005\u6837\u672c\u4e4b\u95f4\u8f6c\u5f55\u7ec4\u7684\u53d8\u5316\uff0c\u7528\u4e8e\u53d1\u73b0\u8fd9\u4e9b\u53d8\u5316\u4e0e\u8fdb\u5c55\u6027\u75be\u75c5\u72b6\u6001\u7684\u8054\u7cfb\u3002","title":"\u80cc\u666f\u77e5\u8bc6"},{"location":"Analysisprocess/","text":"10x\u5206\u6790\u6d41\u7a0b \u6570\u636e\u6765\u6e90\u4e0e\u4e0b\u8f7d SRA\u53f7 \u6837\u672c\u540d SRR11955216 Healthy 1 SRR11955217 Healthy 2 SRR11955218 Mild SRR11955219 Severe \u901a\u8fc7NCBI\u5b98\u65b9\u63a8\u8350\u7684prefetch\u6765\u4e0b\u8f7d\u6570\u636e\uff1a prefetch --option-file SRR_lists.txt \u8f6c\u4e3afastq\u6587\u4ef6 cat sample.txt | while read id do fastq-dump --gzip --split-files -A $id ${id}.sra done \u8fd9\u91cc\u53ea\u8f93\u51fa\u4e86\u4e24\u4e2a\u6587\u4ef6, \u4f46\u662f\u770b\u522b\u7684\u6559\u7a0b\u90fd\u662f\u4e09\u4e2a\u6587\u4ef6, \u5305\u542bindex,barcode+umi\u548creads,sample index\u90a3\u4e2a\u6587\u4ef6\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u4fee\u6539fastq\u6587\u4ef6\u540d \u6839\u636e10x\u5b98\u7f51\u8bf4\u660e\uff0c\u5728\u540e\u7eed\u5904\u7406\u6570\u636e\u4e4b\u524d\uff0c\u8981\u5148\u66f4\u6539fastq\u6587\u4ef6\u540d\uff1a cat sample.txt | while read id do mv ${id}_1.fastq.gz ${id}_S1_L001_R1_001.fastq.gz; mv ${id}_2.fastq.gz ${id}_S1_L001_R2_001.fastq.gz; done fastqc\u8d28\u91cf\u68c0\u6d4b find ./ -name '*R1*.gz' > id_1.txt find ./ -name '*R2*.gz' > id_2.txt cat id_1.txt id_2.txt > id_all.txt cat id_all.txt | xargs fastqc -t 8 -o ./fastqc/ cellranger cellranger\u6709\u591a\u4e2a\u6d41\u7a0b\uff0c\u4e3b\u8981\u67094\u4e2a\u6d41\u7a0b mkfastq\u3001\u5b9a\u91cf count\u3001\u7ec4\u5408 aggr\u3001reanalyze\u3002 \u5982\u679c\u662fbcl\u539f\u59cb\u6d4b\u5e8f\u6570\u636e\uff0c\u9700\u7528mkfastq\u8f6c\u6362\u4e3afastq\u683c\u5f0f(\u6839\u636eindex\u5c06reads\u5206\u914d\u81f3\u4e0d\u540c\u7684\u6837\u672c)\u3002\u5982\u679c\u662ffastq\u683c\u5f0f\u6570\u636e\uff0c\u5219\u53ef\u76f4\u63a5\u7528count\u547d\u4ee4\u5b9a\u91cf\uff0c\u5f97\u5230\u8868\u8fbe\u77e9\u9635\uff0c\u7136\u540e\u7528aggr\u547d\u4ee4\u6574\u5408\u6837\u672c(\u6bd4\u5982\u5b9e\u9a8c\u7ec4\u6709\u591a\u4e2a\u91cd\u590d\u6837\u672c)\uff0c\u6700\u540ereanalyze\u8fdb\u884c\u540e\u7eed\u964d\u7ef4\u805a\u7c7b\u7b49\u7b49\u5206\u6790\u3002 cellranger\u5b89\u88c5\uff1a curl -o cellranger-6.1.2.tar.gz \"https://cf.10xgenomics.com/releases/cell-exp/cellranger-6.1.2.tar.gz?Expires=1652123707&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZi4xMHhnZW5vbWljcy5jb20vcmVsZWFzZXMvY2VsbC1leHAvY2VsbHJhbmdlci02LjEuMi50YXIuZ3oiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NTIxMjM3MDd9fX1dfQ__&Signature=UweLR-FqWO5mPRCQmE7Cf-C99SOE~Q3jcxhY~HxOBosPmxHtEKoJjbxJayMc1XMPYzT7a-NqDWJ7KsHA0fiSXlB~4RSwzttIxo4KdnOjNGUfA-crtsJAwUbxxy1gjYm6TRABNfQb8O1lM9Wm2u4o80y6uZgDy1Kf3DnVyta-Y3gaQjNzvOVEFPZB8jJk9Eed9rc6jH3l896a-8I6qNuyV5EgoqMnXiKA~Ke0ShK7TMHZjhXJjHOT2cDgbr1Tlz8UR8bwcUuewvtNlVm859SvFkoEPsBiHcOaaEz1vtIJHH709bplvIwtah3-OXdHl5ES5EafqkTi2sdGD-z0lcEhWg__&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA\" \u4e0b\u8f7d\u53c2\u8003\u57fa\u56e0\u7ec4\u6570\u636e: curl -O https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz count\u7ec6\u80de\u5b9a\u91cf \u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6700\u91cd\u8981\u7684\uff0c\u5b83\u5b8c\u6210\u7ec6\u80de\u4e0e\u57fa\u56e0\u7684\u5b9a\u91cf\uff0c\u5b83\u5c06\u6bd4\u5bf9\u3001\u8d28\u63a7\u3001\u5b9a\u91cf\u90fd\u5305\u88c5\u4e86\u8d77\u6765: cat sample.txt | while read id do cellranger count --id=${id} \\ --fastqs=/public/workspace/stu19230111/singlecell/rawdata/data/ \\ --sample=${id} \\ --transcriptome=/public/workspace/stu19230111/singlecell/reference/refdata-gex-GRCh38-2020-A/ done cellranger count\u7ed3\u679c\u89e3\u8bfb \u53c2\u9605 \u5f97\u5230cellranger\u5206\u6790\u7ed3\u679c\u540e\uff0c\u4e0b\u6e38\u6211\u4eec\u9700\u8981\u5c06filtered_gene_bc_matrices \u6587\u4ef6\u5939\u4f5c\u4e3a\u8f93\u5165\u6587\u4ef6\u8f93\u5165\u5230seurat\u6216\u8005scanpy\u3002 filtered_gene_bc_matrices \u6587\u4ef6\u5939\u5305\u542b\u4e09\u4e2a\u6587\u4ef6\uff1abarcodes.tsv\uff1bfeatures.tsv\uff1bmatrix.mtx \u591a\u4e2a10x\u5355\u7ec6\u80de\u5bf9\u8c61\u7684\u5408\u5e76\u548c\u6279\u6b21\u6821\u6b63\uff1aseurat\u8bfb\u53d6+Harmony\u6574\u5408 healthy\u7ec4 \u4e00. \u591a\u4e2a\u5355\u7ec6\u80de\u6837\u672c\u7684\u5408\u5e76 1. \u8bfb\u53d6\u5e76\u5408\u5e76\u6570\u636e 1.1 \u8bfb\u53d6\u6570\u636e assays <- dir(\"data1/\") names <- rep(\"/raw_feature_bc_matrix\",length(assays)) dir <- paste0(\"data1/\", assays) dir <- paste0(dir,names) # \u6309\u6587\u4ef6\u987a\u5e8f\u7ed9\u6837\u672c\u547d\u540d\uff0c\u540d\u79f0\u4e0d\u8981\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u7a7a\u683c samples_name = assays 1.2 \u6279\u91cf\u521b\u5efaseurat\u5bf9\u8c61 scRNAlist <- list() for(i in 1:length(dir)){ counts <- Read10X(data.dir = dir[i]) #\u4e0d\u8bbe\u7f6emin.cells\u8fc7\u6ee4\u57fa\u56e0\u4f1a\u5bfc\u81f4CellCycleScoring\u62a5\u9519\uff1a #Insufficient data values to produce 24 bins. scRNAlist[[i]] <- CreateSeuratObject(counts, project=samples_name[i], min.cells=3, min.features = 200) #\u7ed9\u7ec6\u80debarcode\u52a0\u4e2a\u524d\u7f00\uff0c\u9632\u6b62\u5408\u5e76\u540ebarcode\u91cd\u540d scRNAlist[[i]] <- RenameCells(scRNAlist[[i]], add.cell.id = samples_name[i]) #\u8ba1\u7b97\u7ebf\u7c92\u4f53\u57fa\u56e0\u6bd4\u4f8b if(T){ scRNAlist[[i]][[\"percent.mt\"]] <- PercentageFeatureSet(scRNAlist[[i]], pattern = \"^MT-\") } #\u8ba1\u7b97\u6838\u7cd6\u4f53\u57fa\u56e0\u6bd4\u4f8b if(T){ scRNAlist[[i]][[\"percent.rb\"]] <- PercentageFeatureSet(scRNAlist[[i]], pattern = \"^RP[SL]\") } #\u8ba1\u7b97\u7ea2\u7ec6\u80de\u57fa\u56e0\u6bd4\u4f8b if(T){ HB.genes <- c(\"HBA1\",\"HBA2\",\"HBB\",\"HBD\",\"HBE1\",\"HBG1\",\"HBG2\",\"HBM\",\"HBQ1\",\"HBZ\") HB.genes <- CaseMatch(HB.genes, rownames(scRNAlist[[i]])) scRNAlist[[i]][[\"percent.HB\"]]<-PercentageFeatureSet(scRNAlist[[i]], features=HB.genes) } } ### \u7ed9\u5217\u8868\u547d\u540d\u5e76\u4fdd\u5b58\u6570\u636e dir.create(\"Integrate\") setwd(\"./Integrate\") names(scRNAlist) <- samples_name 1.3 \u4f7f\u7528merge\u51fd\u6570\u5c06scRNAlist\u5408\u6210\u4e00\u4e2aSeurat\u5bf9\u8c61 scRNA <- merge(scRNAlist[[1]], scRNAlist[2:length(scRNAlist)]) scRNA # An object of class Seurat # 18818 features across 19738 samples within 1 assay # Active assay: RNA (18818 features, 0 variable features) table(scRNA$orig.ident) 2. \u6570\u636e\u8d28\u63a7 \u8d28\u63a7\u524d theme.set2 = theme(axis.title.x=element_blank()) # \u8bbe\u7f6e\u7ed8\u56fe\u5143\u7d20 #plot.featrures = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\") plot.featrures = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.rb\", \"percent.HB\") group = \"orig.ident\" # \u8d28\u63a7\u524d\u5c0f\u63d0\u7434\u56fe plots = list() for(i in seq_along(plot.featrures)){ plots[[i]] = VlnPlot(scRNA, group.by=group, pt.size = 0, features = plot.featrures[i]) + theme.set2 + NoLegend()} violin <- wrap_plots(plots = plots, nrow=2) dir.create(\"QC\") ggsave(\"QC/health_vlnplot_before_qc.pdf\", plot = violin, width = 9, height = 8) \u8d28\u63a7\u540e minGene=500 maxGene=6000 #maxUMI=15000 pctMT=15 #pctHB=1 ### \u6570\u636e\u8d28\u63a7\u5e76\u7ed8\u5236\u5c0f\u63d0\u7434\u56fe scRNA <- subset(scRNA, subset = nFeature_RNA > minGene & nFeature_RNA < maxGene & percent.mt < pctMT) #scRNA <- subset(scRNA, subset = nCount_RNA < maxUMI & nFeature_RNA > minGene & # nFeature_RNA < maxGene & percent.mt < pctMT & percent.HB < pctHB) plots = list() for(i in seq_along(plot.featrures)){ plots[[i]] = VlnPlot(scRNA, group.by=group, pt.size = 0, features = plot.featrures[i]) + theme.set2 + NoLegend()} violin <- wrap_plots(plots = plots, nrow=2) ggsave(\"QC/health_vlnplot_after_qc.pdf\", plot = violin, width = 10, height = 8) 3. \u67e5\u770b\u6279\u6b21\u6548\u5e94\uff08\u5bf9merge\u540e\u7684Seurat\u5bf9\u8c61\u8fdb\u884c\u6807\u51c6\u5316\u548c\u964d\u7ef4\uff09 scRNA <- subset(scRNA, subset = nCount_RNA < maxUMI & nFeature_RNA > minGene & nFeature_RNA < maxGene & percent.mt < pctMT & percent.HB < pctHB) scRNA <- NormalizeData(scRNA) %>% FindVariableFeatures(nfeatures = 2000) %>% ScaleData() scRNA <- RunPCA(scRNA, verbose = F) ElbowPlot(scRNA, ndims = 50) pc.num=1:30 scRNA <- scRNA %>% RunTSNE(dims=pc.num) %>% RunUMAP(dims=pc.num) scRNA <- FindNeighbors(scRNA, dims=pc.num) %>% FindClusters() p <- DimPlot(scRNA, label = T) ggsave(\"health_UMAP_All.pdf\", p, width = 8, height = 6) p <- DimPlot(scRNA, group.by = \"orig.ident\") ggsave(\"health_UMAP_Samples.pdf\", p, width = 8, height = 6) p <- DimPlot(scRNA, group.by = \"orig.ident\", split.by = \"orig.ident\", ncol = 4) ggsave(\"health_UMAP_Samples_Split.pdf\", p, width = 18, height = 12) \u4e8c. \u6570\u636e\u6574\u5408:harmony scRNAlist <- SplitObject(scRNA, split.by = \"orig.ident\") scRNA@meta.data$stim <- c(rep(\"health1\", ncol(scRNAlist[[1]])), rep(\"health2\", ncol(scRNAlist[[2]])))#\u8d4b\u503c\u6761\u4ef6\u53d8\u91cf #\u672a\u7ecf\u6821\u6b63\u7684PC\u4e2d\u7684\u6570\u636e\u96c6\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u5dee\u5f02\uff1a options(repr.plot.height = 5, repr.plot.width = 12) p1 <- DimPlot(object = scRNA, reduction = \"pca\", pt.size = .1, group.by = \"stim\") p2 <- VlnPlot(object = scRNA, features = \"PC_1\", group.by = \"stim\", pt.size = .1) pdf(\"health_harmony\u6574\u5408\u524d.pdf\") plot_grid(p1,p2) dev.off() ###\u8fd0\u884cHarmony\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f20\u9012Seurat\u5bf9\u8c61\u5e76\u6307\u5b9a\u8981\u96c6\u6210\u7684\u53d8\u91cf\u3002RunHarmony\u8fd4\u56deSeurat\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u66f4\u6b63\u540e\u7684Harmony\u5750\u6807\u3002\u8ba9\u6211\u4eec\u5c06plot_convergence\u8bbe\u7f6e\u4e3aTRUE\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u4fddHarmony\u76ee\u6807\u51fd\u6570\u5728\u6bcf\u4e00\u8f6e\u4e2d\u90fd\u53d8\u5f97\u66f4\u597d\u3002 options(repr.plot.height = 2.5, repr.plot.width = 6) scRNA <- scRNA %>% RunHarmony(\"stim\", plot_convergence = TRUE) #\u8981\u76f4\u63a5\u8bbf\u95ee\u65b0\u7684Harmony embeddings\uff0c\u8bf7\u4f7f\u7528Embeddings\u547d\u4ee4\u3002 harmony_embeddings <- Embeddings(scRNA, 'harmony') harmony_embeddings[1:5, 1:5] #\u8ba9\u6211\u4eec\u67e5\u770b\u786e\u8ba4\u6570\u636e\u96c6\u5728Harmony\u8fd0\u884c\u4e4b\u540e\u7684\u524d\u4e24\u4e2a\u7ef4\u5ea6\u4e2d\u5f97\u5230\u5f88\u597d\u7684\u6574\u5408\u3002 options(repr.plot.height = 5, repr.plot.width = 12) p1 <- DimPlot(object = scRNA, reduction = \"harmony\", pt.size = .1, group.by = \"stim\") p2 <- VlnPlot(object = scRNA, features = \"harmony_1\", group.by = \"stim\", pt.size = .1) pdf(\"health_harmony\u6574\u5408\u540e.pdf\") plot_grid(p1,p2) dev.off() \u6574\u5408\u524d\uff1a \u6574\u5408\u540e\uff1a UMAP\u56fe\uff1a scRNA <- scRNA %>% RunUMAP(reduction = \"harmony\", dims = 1:20) %>% FindNeighbors(reduction = \"harmony\", dims = 1:20) %>% FindClusters(resolution = 0.5) %>% identity() #UMAP embedding\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u66f4\u590d\u6742\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528harmony embeddings\uff0c\u56e0\u6b64UMAP embeddings\u6df7\u5408\u5f97\u5f88\u597d\u3002 options(repr.plot.height = 4, repr.plot.width = 10) pdf(\"health_harmony_UMAP_embedding.pdf\") DimPlot(scRNA, reduction = \"umap\", group.by = \"stim\", pt.size = .1, split.by = 'stim') dev.off() #\u5728\u8fd9\u79cd\u5145\u5206\u6df7\u5408\u7684\u5d4c\u5165\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\u805a\u7c7b\u5206\u6790\u6765\u8bc6\u522b\u7ec6\u80de\u7c7b\u578b\u3002 scRNA=RunUMAP(scRNA,reduction = \"harmony\", dims = 1:20) pdf(\"health_harmony_UMAP_split.pdf\") DimPlot(scRNA,label = T,split.by = 'stim') dev.off() options(repr.plot.height = 4, repr.plot.width = 6) pdf(\"health_harmony_UMAP.pdf\") DimPlot(scRNA, reduction = \"umap\", label = TRUE, pt.size = .1) dev.off() \u6bd4\u8f83\u4e86\u4e24\u540d\u5065\u5eb7\u60a3\u8005\u7684\u6570\u636e\u3002\u6765\u81ea\u8fd9\u4e9b\u5065\u5eb7\u60a3\u8005\u7684\u7ec6\u80de\u975e\u5e38\u76f8\u4f3c\u3002\u4ece\u4e24\u4e2a\u5065\u5eb7\u7259\u9f88\u6d3b\u68c0\u4e2d\u83b7\u5f97\u7684\u6570\u636e\u96c6\u7684\u9ad8\u5ea6\u4e00\u81f4\u6027\u5e76\u653e\u5927\u7814\u7a76\u540e\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u88ab\u5408\u5e76\u5e76\u5904\u7406\u5728\u4e00\u8d77\u4ee5\u8fdb\u884c\u540e\u7eed\u5206\u6790\u3002 \u6574\u5408\u75c5\u4f8b\u7ec4\u7ed3\u679c\u5982\u4e0b \u7ec6\u80de\u6ce8\u91ca \u5bfb\u627e\u9700\u8981\u6ce8\u91ca\u7ec6\u80de\u7684marker\u57fa\u56e0 pbmc <- readRDS(\"./AllIntegrate/All_scRNA.rds\") pbmc <- JackStraw(pbmc, num.replicate = 100) pbmc <- ScoreJackStraw(pbmc, dims = 1:20) JackStrawPlot(pbmc, dims = 1:15) pbmc <- FindNeighbors(pbmc, dims = 1:10) pbmc <- FindClusters(pbmc, resolution = 0.5) head(Idents(pbmc), 5) pbmc <- RunUMAP(pbmc, dims = 1:10) pbmc <- RunTSNE(pbmc, dims = 1:10) pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC) p <- DoHeatmap(pbmc, features = top10$gene) + NoLegend() ggsave(\"Heatmap.pdf\", p, width = 18, height = 12) top1 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 1, wt = avg_log2FC) p <- FeaturePlot(pbmc,features = top1$gene) ggsave(\"Heatmap2.pdf\", p, width = 18, height = 30) p <- FeaturePlot(pbmc,features = c('MZB1','KRT14','CDH1','HOPX','IGFBP5','LAMB3','KRT1','TPSB2','TRAC','CXCR6','LYZ','AIF1','COL1A1','MS4A1','CLDN5','RGS5','MKI67','CLEC9A','IRF8','KDR','TIE1','PTPRC')) ggsave(\"Heatmap1.pdf\", p, width = 18, height = 30) #\u70b9\u56fe markers <- c('MZB1','KRT14','CDH1','HOPX','IGFBP5','LAMB3','KRT1','TPSB2','TRAC','CXCR6','LYZ','AIF1','COL1A1','MS4A1','CLDN5','RGS5','MKI67','CLEC9A','IRF8','KDR','TIE1','PTPRC') DotPlot(pbmc, features = unique(markers),group.by = \"seurat_clusters\")+RotatedAxis()+ scale_x_discrete(\"\")+scale_y_discrete(\"\") ggsave(\"celltype_marker_dot.pdf\",width = 9.5,height = 6) ggsave(\"celltype_marker_dot.pdf\",width = 9.5,height = 6) \u663e\u793a\u7528\u4e8e\u7ec6\u80de\u7c7b\u578b\u5206\u7c7b\u7684\u8c31\u7cfb\u6807\u8bb0\u57fa\u56e0\u7684\u8868\u8fbe\uff1a \u7ec6\u80de\u6ce8\u91ca bfreaname.pbmc <- pbmc new.cluster.ids <- c(\"IgG Plasma B Cells\", \"Epithelial 1\", \"Mast Cells\", \"T Cells\", \"Macrophage 1\", \"Follicular B Cells\", \"Stromal\",\"Memory B Cells\",\"Epithelial 2\", \"Endothelial 1\",\"Perivasular\",\"Macrophage 2\",\"TAGs\",\"DC\",\"pDC\",\"Endothelial 2\") #\u5e2e\u52a9\u5355\u7ec6\u80de\u6d4b\u5e8f\u8fdb\u884c\u6ce8\u91ca\u7684\u6570\u636e\u5e93\uff1a #http://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247502903&idx=2&sn=fd21e6e111f57a4a2b6c987e391068fd&chksm=ec0e09bddb7980abf038f62d03d3beea6249753c8fba69b69f399de9854fc208ca863ca5bc23&mpshare=1&scene=24&srcid=1110SJhxDL8hmNB5BThrgOS9&sharer_sharetime=1604979334616&sharer_shareid=853c5fb0f1636baa0a65973e8b5db684#rd #cellmarker: http://biocc.hrbmu.edu.cn/CellMarker/index.jsp names(new.cluster.ids) <- levels(pbmc) pbmc <- RenameIdents(pbmc, new.cluster.ids) pbmc$celltype <- pbmc@active.ident pdf(\"\u6ce8\u91ca.pdf\") DimPlot(pbmc, reduction = \"umap\", label = TRUE, pt.size = 0.5) + NoLegend() dev.off() p <- DimPlot(pbmc,label = T,split.by = 'stim') ggsave(\"\u6ce8\u91ca_split.pdf\", p, width = 18, height = 12) saveRDS(pbmc, \"All_\u6ce8\u91ca_scRNA.rds\") \u5728\u4e0a\u76ae\u533a\u5ba4\u4e2d\uff0c\u6211\u4eec\u786e\u5b9a\u4e86\u4e09\u4e2a\u4e9a\u7fa4\uff08\u96c6\u7fa41\uff0c8\u548c12\uff09\uff0c\u53ef\u80fd\u5bf9\u5e94\u4e8e\u4e0d\u540c\u7684\u5206\u5316\u9636\u6bb5\u3002\u7c071\u663e\u793a\u5177\u6709HOPX\uff0cIGFBP5\u548cLAMM3\u8868\u8fbe\u7684\u57fa\u7840\u7ec6\u80de\u72b6\u6001;\u548c\u7c078\u662f\u66f4\u6210\u719f\u7684\u7ec6\u80de\u72b6\u6001\uff0c\u8868\u8fbeKRT1\uff0cKRT8\uff0cLAT\uff08\u7528\u4e8e\u6fc0\u6d3bT\u7ec6\u80de\u7684\u8fde\u63a5\u5b50\uff09\u548cPTGER\uff0c\u4e24\u8005\u90fd\u662fTCR\uff08T\u7ec6\u80de\u6297\u539f\u53d7\u4f53\uff09\u4fe1\u53f7\u4f20\u5bfc\uff08\u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3). \u901a\u8fc7\u8868\u8fbe\u589e\u6b96\u7ec6\u80de\uff08\u5982MKI67\u548cTOP2A\uff09\u7684\u89c4\u8303\u6807\u8bb0\u57fa\u56e0\uff0c\u5728\u7b2c12\u7c07\u4e2d\u9274\u5b9a\u589e\u6b96\u57fa\u5e95\u7ec6\u80de\uff08Whitfield\u7b49\u4eba\uff0c2006\uff09; \u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 2).\u6211\u4eec\u8fd8\u6839\u636e\u80f6\u539f\u86cb\u767d\u7684\u8868\u8fbe\u9274\u5b9a\u95f4\u5145\u8d28\uff08\u57fa\u8d28\u6210\u7ea4\u7ef4\u7ec6\u80de\uff09\uff08\u7c076\uff09;\u4e00\u4e2a\u8840\u7ba1\u5468\u56f4\uff0810\u7c07\uff09\u901a\u8fc7\u9ad8\u8868\u8fbePDGFRB\u548cRGS5 (\u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3);\u4e24\u4e2a\u5185\u76ae\uff08\u7c079\u548c15\uff09\uff0c\u5176\u4e2d\u7c079\u7279\u5f02\u6027\u8868\u8fbeCLDN5\u548cEMCN\uff0c\u7c0715\u663e\u793a\u53c2\u4e0e\u8840\u7ba1\u751f\u6210\u8c03\u8282\u7684\u57fa\u56e0\u7684\u9ad8\u8868\u8fbe\uff0c\u4f8b\u5982KDR\uff0cTIE1\u548cSOX18\uff08Jones\u7b49\u4eba\uff0c2001;\u5f17\u6717\u7d22\u74e6\u7b49\u4eba\uff0c2008\u5e74; \u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3). B\u7ec6\u80de\u663e\u793a\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u7fa4\u4f53\uff08\u7c070\uff0c5\u548c7\uff09\u4e2d\uff0c\u7c070\u548c5\u5206\u522b\u8868\u8fbe\u6ee4\u6ce1\u548cIgG\u6d46B\u7ec6\u80de\u7684MZB1\uff0cDERL3\u548cIGHG4\u7279\u5f81\uff0c\u7c077\u8868\u8fbeMS4A1\u548cCD37\u5bf9\u5e94\u4e8e\u8bb0\u5fc6B\u7ec6\u80de\u3002T\u7ec6\u80de\u663e\u793a\u5728\u901a\u8fc7\u8868\u8fbe\u89c4\u8303TRM\u6807\u8bb0CXCR6\u9274\u5b9a\u7684\u7c073\u4e2d\u3002 \u67e5\u770b\u6bcf\u7ec4\u7684\u7ec6\u80de\u7ec4\u6210 #table(pbmc$orig.ident)#\u67e5\u770b\u5404\u7ec4\u7ec6\u80de\u6570 table(pbmc$stim) #BM1 BM2 BM3 GM1 GM2 GM3 #2754 747 2158 1754 1528 1983 prop.table(table(Idents(pbmc))) #table(Idents(pbmc), pbmc$orig.ident)#\u5404\u7ec4\u4e0d\u540c\u7ec6\u80de\u7fa4\u7ec6\u80de\u6570 table(Idents(pbmc), pbmc$stim) #Cellratio <- prop.table(table(Idents(scedata), scedata$orig.ident), margin = 2)#\u8ba1\u7b97\u5404\u7ec4\u6837\u672c\u4e0d\u540c\u7ec6\u80de\u7fa4\u6bd4\u4f8b Cellratio <- prop.table(table(Idents(pbmc), pbmc$stim), margin = 2) Cellratio Cellratio <- as.data.frame(Cellratio) colourCount = length(unique(Cellratio$Var1)) library(ggplot2) ################# p<-ggplot(Cellratio) + geom_bar(aes(x =Var2, y= Freq, fill = Var1),stat = \"identity\",width = 0.7,size = 0.5,colour = '#222222')+ theme_classic() + labs(x='Sample',y = 'Ratio')+ coord_flip()+ theme(panel.border = element_rect(fill=NA,color=\"black\", size=0.5, linetype=\"solid\")) ggsave(\"cellrate.pdf\", p, width = 18, height = 12) \u5728\u8f6c\u5f55\u7ec4\u5b66\u6c34\u5e73\u4e0a\uff0c\u7ec6\u80de\u666f\u89c2\u4e3b\u8981\u7531\u7ec6\u80de\u6bd4\u4f8b\u7684\u76f8\u5e94\u53d8\u5316\u3002\u5728\u5065\u5eb7\u65b9\u9762\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6ee4\u6ce1\u548c\u6d46B\u7ec6\u80de\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u8bb0\u5fc6B\u7ec6\u80de\u5728\u8f7b\u5ea6\u6837\u672c\u4e2d\u663e\u793a\u51fa\u663e\u7740\u7684\u589e\u52a0\uff0c\u968f\u540e\u5728\u91cd\u5ea6\u6837\u672c\u4e2d\u3002 \u4e0a\u76ae\u7ec6\u80de\u4e9a\u7fa4\u7ec6\u5206 library(Seurat) Stromal <- subset(pbmc, celltype==\"Epithelial 1\" | celltype==\"Epithelial 2\") Stromal <- ScaleData(Stromal, vars.to.regress = c(\"nCount_RNA\", \"percent.mt\"), verbose = FALSE) Stromal <- FindVariableFeatures(Stromal, nfeatures = 2000) Stromal <- RunPCA(Stromal, npcs = 50, verbose = FALSE) Stromal <- FindNeighbors(Stromal, reduction = \"pca\", dims = 1:50) Stromal <- FindClusters(Stromal, resolution = seq(from = 0.1, to = 1.0, by = 0.2)) Stromal <- RunUMAP(Stromal, reduction = \"pca\", dims = 1:50) library(clustree) #clustree(Stromal) Idents(Stromal) <- \"RNA_snn_res.0.5\" Stromal$seurat_clusters <- Stromal@active.ident p<-DimPlot(Stromal, label = T,pt.size = 1) ggsave(\"Stromal.pdf\", p, width = 12, height = 12) Stromal.markers <- FindAllMarkers(Stromal, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top5 <- Stromal.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC) p <- DoHeatmap(Stromal, features = top5$gene) + NoLegend() ggsave(\"StromalHeatmap.pdf\", p, width = 18, height = 12) \u7c070\u4e8e\u5176\u4ed6\u7c07\u4e4b\u95f4\u5dee\u5f02\u57fa\u56e0\u5bcc\u96c6\u5206\u6790 library(msigdbr) library(ggplot2) library(clusterProfiler) library(org.Mm.eg.db) ##\u52a0\u8f7d\u5c0f\u9f20 library(org.Hs.eg.db) ##\u52a0\u8f7d\u4eba\u7c7b library(fgsea) library(dplyr) library(tibble) library(Seurat) cluster5.markers <- FindMarkers(Stromal, ident.1 = 0, ident.2 = c(1:5), min.pct = 0.25) up <-rownames(cluster5.markers[intersect(which(cluster5.markers [,1]<0.05),which(cluster5.markers [,2]>=0.25)),]) down <-rownames(cluster5.markers[intersect(which(cluster5.markers [,1]<0.05),which(cluster5.markers [,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) write.csv(ego.bp, file =\"Cluster5_up_go.csv\") ##\u8f93\u51faup \u57fa\u56e0\u5bcc\u96c6\u7684Go term pdf(\"Cluster5_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster0 Vs.Cluster1:5 up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) write.csv(kk,file =\"Cluster5_up_kegg.csv\") ##\u8f93\u51faup \u57fa\u56e0\u5bcc\u96c6\u7684Kegg term pdf(\"Cluster5_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Up_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) write.csv(ego.bp, file =\"Cluster5_down_go.csv\") ##\u8f93\u51fadown \u57fa\u56e0\u5bcc\u96c6\u7684Go term pdf(\"Cluster5_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster5Vs.Cluster03 down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) write.csv(kk,file =\"Cluster5_down_kegg.csv\") ##\u8f93\u51fadown \u57fa\u56e0\u5bcc\u96c6\u7684Kegg term pdf(\"Cluster5_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() markers = cluster5.markers markers$genes = rownames(markers) cluster.genes<- markers %>% arrange(desc(avg_log2FC)) %>% dplyr::select(genes,avg_log2FC) #\u57fa\u56e0\u6309logFC\u6392\u5e8f ranks<- deframe(cluster.genes) mdb_c2 <- msigdbr(species = \"Homo sapiens\", category = \"C2\")## \u5b9a\u4e49\u57fa\u56e0\u96c6\uff0c\u9009\u53d6C2 fgsea_sets = mdb_c2 [grep(\"^KEGG\",mdb_c2 $gs_name),] %>% split(x = .$gene_symbol, f = .$gs_name) length(fgsea_sets) fgseaRes<- fgsea(fgsea_sets, stats = ranks, nperm = 1000) #\u8fd0\u884cfgsea p <-ggplot(fgseaRes %>% as_tibble() %>% arrange(desc(NES)) %>% filter(pval < 0.05) %>% head(n= 20), aes(reorder(pathway, NES), NES)) + geom_col(aes(fill= NES)) + coord_flip() + labs(x=\"KEGG\", y=\"Normalized Enrichment Score\",title=\"KEGG gene sets NES from GSEA\") ##\u8f93\u51fa\u5dee\u5f02\u6392\u79e9\u524d20\u7684\u6761\u76ee pdf('GSEA-fgsea.pdf',width=8,height=5) print(p) dev.off() \u62df\u65f6\u5206\u6790 Monocle2 library(monocle) ##\u63d0\u53d6\u8868\u578b\u4fe1\u606f--\u7ec6\u80de\u4fe1\u606f(\u5efa\u8bae\u8f7d\u5165\u7ec6\u80de\u7684\u805a\u7c7b\u6216\u8005\u7ec6\u80de\u7c7b\u578b\u9274\u5b9a\u4fe1\u606f\u3001\u5b9e\u9a8c\u6761\u4ef6\u7b49\u4fe1\u606f) expr_matrix <- as(as.matrix(pbmc@assays$RNA@counts), 'sparseMatrix') ##\u63d0\u53d6\u8868\u578b\u4fe1\u606f\u5230p_data(phenotype_data)\u91cc\u9762 p_data <- pbmc@meta.data #p_data$celltype <- pbmc@active.ident ##\u6574\u5408\u6bcf\u4e2a\u7ec6\u80de\u7684\u7ec6\u80de\u9274\u5b9a\u4fe1\u606f\u5230p_data\u91cc\u9762\u3002\u5982\u679c\u5df2\u7ecf\u6dfb\u52a0\u5219\u4e0d\u5fc5\u91cd\u590d\u6dfb\u52a0 ##\u63d0\u53d6\u57fa\u56e0\u4fe1\u606f \u5982\u751f\u7269\u7c7b\u578b\u3001gc\u542b\u91cf\u7b49 f_data <- data.frame(gene_short_name = row.names(pbmc),row.names = row.names(pbmc)) ##expr_matrix\u7684\u884c\u6570\u4e0ef_data\u7684\u884c\u6570\u76f8\u540c(gene number), expr_matrix\u7684\u5217\u6570\u4e0ep_data\u7684\u884c\u6570\u76f8\u540c(cell number) #\u6784\u5efaCDS\u5bf9\u8c61 pd <- new('AnnotatedDataFrame', data = p_data) fd <- new('AnnotatedDataFrame', data = f_data) #\u5c06p_data\u548cf_data\u4ecedata.frame\u8f6c\u6362AnnotatedDataFrame\u5bf9\u8c61\u3002 cds <- newCellDataSet(expr_matrix, phenoData = pd, featureData = fd, lowerDetectionLimit = 0.5, expressionFamily = negbinomial.size()) cds <- estimateSizeFactors(cds) cds <- estimateDispersions(cds) cds <- detectGenes(cds, min_expr = 0.1) #\u8fd9\u4e00\u64cd\u4f5c\u4f1a\u5728fData(cds)\u4e2d\u6dfb\u52a0\u4e00\u5217num_cells_expressed print(head(fData(cds)))#\u6b64\u65f6\u670913714\u4e2a\u57fa\u56e0 expressed_genes <- row.names(subset(fData(cds), num_cells_expressed >= 10)) #\u8fc7\u6ee4\u6389\u5728\u5c0f\u4e8e10\u4e2a\u7ec6\u80de\u4e2d\u8868\u8fbe\u7684\u57fa\u56e0\uff0c\u8fd8\u526911095\u4e2a\u57fa\u56e0\u3002 ##\u4f7f\u7528seurat\u9009\u62e9\u7684\u9ad8\u53d8\u57fa\u56e0\u26a0\ufe0f express_genes <- VariableFeatures(pbmc) cds <- setOrderingFilter(cds, express_genes) plot_ordering_genes(cds) ##\u4f7f\u7528clusters\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0 deg.cluster <- FindAllMarkers(pbmc) express_genes <- subset(deg.cluster,p_val_adj<0.05)$gene cds <- setOrderingFilter(cds, express_genes) plot_ordering_genes(cds) ##\u4f7f\u7528monocle\u9009\u62e9\u7684\u9ad8\u53d8\u57fa\u56e0\u26a0\ufe0f disp_table <- dispersionTable(cds) disp.genes <- subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 1 * dispersion_fit)$gene_id cds <- setOrderingFilter(cds, disp.genes) plot_ordering_genes(cds) #\u8fd9\u4e00\u6b65\u8f93\u5165\u7684expressed_genes\u6765\u81ea\u4e8e\u6b65\u9aa44\u3002 #\u26a0\ufe0f\u26a0\ufe0f\u540e\u7eed\u5206\u6790\u4f7f\u7528\u7684\u662f\u8be5\u65b9\u6cd5 #\u4e5f\u53ef\u8f93\u5165seurat\u7b5b\u9009\u51fa\u7684\u9ad8\u53d8\u57fa\u56e0\uff1aexpressed_genes <- VariableFeatures(pbmc) diff <- differentialGeneTest(cds[expressed_genes,],fullModelFormulaStr=\"~celltype\",cores=1) #~\u540e\u9762\u662f\u8868\u793a\u5bf9\u8c01\u505a\u5dee\u5f02\u5206\u6790\u7684\u53d8\u91cf\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4e3ap_data\u7684\u4efb\u610f\u5217\u540d head(diff) ##\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0\u4f5c\u4e3a\u8f68\u8ff9\u6784\u5efa\u7684\u57fa\u56e0,\u5dee\u5f02\u57fa\u56e0\u7684\u9009\u62e9\u6807\u51c6\u662fqval<0.01,decreasing=F\u8868\u793a\u6309\u6570\u503c\u589e\u52a0\u6392\u5e8f deg <- subset(diff, qval < 0.01) #\u9009\u51fa2829\u4e2a\u57fa\u56e0 deg <- deg[order(deg$qval,decreasing=F),] head(deg) ##\u5dee\u5f02\u57fa\u56e0\u7684\u7ed3\u679c\u6587\u4ef6\u4fdd\u5b58 write.table(deg,file=\"train.monocle.DEG.xls\",col.names=T,row.names=F,sep=\"\\t\",quote=F) ## \u8f68\u8ff9\u6784\u5efa\u57fa\u56e0\u53ef\u89c6\u5316 ordergene <- rownames(deg) cds <- setOrderingFilter(cds, ordergene) #\u8fd9\u4e00\u6b65\u662f\u5f88\u91cd\u8981\u7684\uff0c\u5728\u6211\u4eec\u5f97\u5230\u60f3\u8981\u7684\u57fa\u56e0\u5217\u8868\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528setOrderingFilter\u5c06\u5b83\u5d4c\u5165cds\u5bf9\u8c61\uff0c\u540e\u7eed\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u90fd\u8981\u4f9d\u8d56\u4e8e\u8fd9\u4e2alist\u3002 #setOrderingFilter\u4e4b\u540e\uff0c\u8fd9\u4e9b\u57fa\u56e0\u88ab\u50a8\u5b58\u5728cds@featureData@data[[\"use_for_ordering\"]]\uff0c\u53ef\u4ee5\u901a\u8fc7table(cds@featureData@data[[\"use_for_ordering\"]])\u67e5\u770b pdf(\"train.ordergenes.pdf\") plot_ordering_genes(cds) dev.off() #\u51fa\u7684\u56fe\u9ed1\u8272\u7684\u70b9\u8868\u793a\u7528\u6765\u6784\u5efa\u8f68\u8ff9\u7684\u5dee\u5f02\u57fa\u56e0\uff0c\u7070\u8272\u8868\u793a\u80cc\u666f\u57fa\u56e0\u3002\u7ea2\u8272\u7684\u7ebf\u662f\u6839\u636e\u7b2c2\u6b65\u8ba1\u7b97\u7684\u57fa\u56e0\u8868\u8fbe\u5927\u5c0f\u548c\u79bb\u6563\u5ea6\u5206\u5e03\u7684\u8d8b\u52bf(\u53ef\u4ee5\u770b\u5230\uff0c\u627e\u5230\u7684\u57fa\u56e0\u5c5e\u4e8e\u79bb\u6563\u5ea6\u6bd4\u8f83\u9ad8\u7684\u57fa\u56e0) ordergene <- row.names(deg)[order(deg$qval)][1:400] cds <- reduceDimension(cds, max_components = 2, method = 'DDRTree') cds <- orderCells(cds) #\u26a0\ufe0f\u4f7f\u7528root_state\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u62df\u65f6\u95f4\u8f74\u7684\u6839\uff0c\u5982\u4e0b\u9762\u7684\u62df\u65f6\u95f4\u7740\u8272\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5de6\u8fb9\u662f\u6839\u3002\u6839\u636estate\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6839\u662fState1\uff0c\u82e5\u8981\u60f3\u628a\u53e6\u4e00\u7aef\u8bbe\u4e3a\u6839\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u64cd\u4f5c #cds <- orderCells(cds, root_state = 5) #\u628aState5\u8bbe\u6210\u62df\u65f6\u95f4\u8f74\u7684\u8d77\u59cb\u70b9 pdf(\"train.monocle.pseudotime.pdf\",width = 7,height = 7) plot_cell_trajectory(cds,color_by=\"Pseudotime\", size=1,show_backbone=TRUE) dev.off() pdf(\"train.monocle.celltype.pdf\",width = 7,height = 7) plot_cell_trajectory(cds,color_by=\"celltype\", size=1,show_backbone=TRUE) dev.off() pdf(\"train.monocle.state.pdf\",width = 7,height = 7) plot_cell_trajectory(cds, color_by = \"State\",size=1,show_backbone=TRUE) dev.off() pdf(\"seurat.clusters.pdf\",width = 7,height = 7) plot_cell_trajectory(cds, color_by = \"seurat_clusters\") dev.off() library(ggsci) p1=plot_cell_trajectory(cds, color_by = \"cell_type\") + scale_color_npg() p2=plot_cell_trajectory(cds, color_by = \"State\") + scale_color_nejm() colour=c(\"#DC143C\",\"#0000FF\",\"#20B2AA\",\"#FFA500\",\"#9370DB\",\"#98FB98\",\"#F08080\") p3=plot_cell_trajectory(cds, color_by = \"State\") + scale_color_manual(values = colour) p1|p2|p3 p1 <- plot_cell_trajectory(cds, x = 1, y = 2, color_by = \"celltype\") + theme(legend.position='none',panel.border = element_blank()) p2 <- plot_complex_cell_trajectory(cds, x = 1, y = 2, color_by = \"celltype\")+ theme(legend.title = element_blank()) ggsave(\"tree+train.monocle.celltype.pdf\", p1|p2, width = 18, height = 9) library(ggpubr) df <- pData(cds) p<-ggplot(df, aes(Pseudotime, colour = celltype, fill=celltype)) + geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2() ggsave(\"cellmidu.pdf\", p, width = 18, height = 12) #\u8fd9\u91cc\u662f\u628a\u6392\u5e8f\u57fa\u56e0\uff08ordergene\uff09\u63d0\u53d6\u51fa\u6765\u505a\u56de\u5f52\u5206\u6790\uff0c\u6765\u627e\u5b83\u4eec\u662f\u5426\u8ddf\u62df\u65f6\u95f4\u6709\u663e\u8457\u7684\u5173\u7cfb #\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u5c31\u4f1a\u7528\u6240\u6709\u57fa\u56e0\u6765\u505a\u5b83\u4eec\u4e0e\u62df\u65f6\u95f4\u7684\u76f8\u5173\u6027 Time_diff <- differentialGeneTest(cds[ordergene,], cores = 1, fullModelFormulaStr = \"~sm.ns(Pseudotime)\") Time_diff <- Time_diff[,c(5,2,3,4,1,6,7)] #\u628agene\u653e\u524d\u9762\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u6539 write.csv(Time_diff, \"Time_diff_all.csv\", row.names = F) Time_genes <- Time_diff %>% pull(gene_short_name) %>% as.character() p=plot_pseudotime_heatmap(cds[Time_genes,], num_clusters=16, show_rownames=T, return_heatmap=T) ggsave(\"Time_heatmapAll.pdf\", p, width = 5, height = 10) Monocle3 library(Seurat) library(monocle3) library(tidyverse) library(patchwork) rm(list=ls()) dir.create(\"Monocle3\") setwd(\"Monocle3\") data <- GetAssayData(pbmc, assay = 'RNA', slot = 'counts') cell_metadata <- pbmc@meta.data gene_annotation <- data.frame(gene_short_name = rownames(data)) rownames(gene_annotation) <- rownames(data) cds <- new_cell_data_set(data, cell_metadata = cell_metadata, gene_metadata = gene_annotation) cds <- preprocess_cds(cds, num_dim = 50) pdf(\"1.pdf\") plot_pc_variance_explained(cds) dev.off() cds <- reduce_dimension(cds,preprocess_method = \"PCA\") #preprocess_method\u9ed8\u8ba4\u662fPCA pdf(\"2.pdf\") plot_cells(cds) dev.off() p1 <- plot_cells(cds, reduction_method=\"UMAP\", color_cells_by=\"seurat_clusters\") + ggtitle('cds.umap') ##\u4eceseurat\u5bfc\u5165\u6574\u5408\u8fc7\u7684umap\u5750\u6807 cds.embed <- cds@int_colData$reducedDims$UMAP int.embed <- Embeddings(pbmc, reduction = \"umap\") int.embed <- int.embed[rownames(cds.embed),] cds@int_colData$reducedDims$UMAP <- int.embed p2 <- plot_cells(cds, reduction_method=\"UMAP\", color_cells_by=\"seurat_clusters\") + ggtitle('int.umap') p = p1|p2 ggsave(\"Reduction_Compare.pdf\", plot = p, width = 10, height = 5) cds <- reduce_dimension(cds, reduction_method=\"tSNE\") cds <- cluster_cells(cds) cds <- learn_graph(cds) p = plot_cells(cds, color_cells_by = \"celltype\", label_groups_by_cluster=FALSE, label_leaves=FALSE, label_branch_points=FALSE) ggsave(\"Trajectory.pdf\", plot = p, width = 8, height = 6) p<-plot_cells(cds, color_cells_by = \"celltype\", label_groups_by_cluster=FALSE, label_leaves=TRUE, label_branch_points=TRUE,graph_label_size=1.5) ggsave(\"Trajectory1.pdf\", plot = p, width = 8, height = 6) ### get_earliest_principal_node <- function(cds, time_bin=\"IgG Plasma B Cells\"){ cell_ids <- which(colData(cds)[, \"celltype\"] == time_bin) closest_vertex <-cds@principal_graph_aux[[\"UMAP\"]]$pr_graph_cell_proj_closest_vertex closest_vertex <- as.matrix(closest_vertex[colnames(cds), ]) root_pr_nodes <- igraph::V(principal_graph(cds)[[\"UMAP\"]])$name[as.numeric(names(which.max(table(closest_vertex[cell_ids,]))))] root_pr_nodes } cds = order_cells(cds, root_pr_nodes=get_earliest_principal_node(cds)) p<-plot_cells(cds, color_cells_by = \"pseudotime\", label_cell_groups=FALSE, label_leaves=TRUE, label_branch_points=FALSE, show_trajectory_graph = TRUE) ggsave(\"Trajectory2.pdf\", plot = p, width = 8, height = 6) RNA Velocity library(velocyto.R) input_loom <- \"severe.loom\" ldat <- read.loom.matrices(input_loom) emat <- ldat$spliced emat <- emat[,colSums(emat)>=1e3] #install.packages(\"pagoda2\") library(pagoda2) rownames(emat) <- make.unique(rownames(emat)) r <- Pagoda2$new(emat,modelType='plain',trim=10,log.scale=T) r$adjustVariance(plot=T,do.par=T,gam.k=10) r$calculatePcaReduction(nPcs=100,n.odgenes=3e3,maxit=300) r$makeKnnGraph(k=30,type='PCA',center=T,distance='cosine') r$getKnnClusters(method=multilevel.community,type='PCA',name='multilevel') r$getEmbedding(type='PCA',embeddingType='tSNE',perplexity=50,verbose=T) pdf(\"r_plotEmbedding.pdf\",width=15,height=15) r$plotEmbedding(type='PCA',embeddingType='tSNE',show.legend=F,mark.clusters=T,min.group.size=10,shuffle.colors=F,mark.cluster.cex=1,alpha=0.3,main='cell clusters') dev.off() #\u6b64\u884c\u4ee3\u7801\u4f1a\u62a5\u9519r$plotEmbedding(type='PCA',embeddingType='tSNE',colors=r$counts[,\"Xist\"],main='Xist') emat <- ldat$spliced nmat <- ldat$unspliced emat <- emat[,rownames(r$counts)] nmat <- nmat[,rownames(r$counts)] # restrict to cells that passed p2 filter cluster.label <- r$clusters$PCA[[1]] cell.colors <- sccore::fac2col(cluster.label) emb <- r$embeddings$PCA$tSNE cell.dist <- as.dist(1-armaCor(t(r$reductions$PCA))) emat <- filter.genes.by.cluster.expression(emat,cluster.label,min.max.cluster.average = 0.5) nmat <- filter.genes.by.cluster.expression(nmat,cluster.label,min.max.cluster.average = 0.05) length(intersect(rownames(emat),rownames(emat))) fit.quantile <- 0.02 rvel.cd <- gene.relative.velocity.estimates(emat,nmat,deltaT=1,kCells=20,cell.dist=cell.dist,fit.quantile=fit.quantile) pdf(\"show.velocity.on.embedding.cor.pdf\",width=15,height=15) show.velocity.on.embedding.cor(emb,rvel.cd,n=300,scale='sqrt',cell.colors=ac(cell.colors,alpha=0.5),cex=0.8,arrow.scale=5,show.grid.flow=TRUE,min.grid.cell.mass=0.5,grid.n=40,arrow.lwd=1,do.par=F,cell.border.alpha = 0.1) dev.off() IgG Plasma B Cells\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0 library(msigdbr) library(ggplot2) library(clusterProfiler) library(org.Mm.eg.db) ##\u52a0\u8f7d\u5c0f\u9f20 library(org.Hs.eg.db) ##\u52a0\u8f7d\u4eba\u7c7b library(fgsea) library(dplyr) library(tibble) library(Seurat) Bcell <- subset(pbmc, celltype==\"IgG Plasma B Cells\") cell_selection <- SetIdent(Bcell, value = \"stim\") Bmarkers <- FindMarkers(cell_selection, ident.1 = \"health\", ident.2 = c(\"mild\",\"severe\"), min.pct = 0.25) up <-rownames(Bmarkers[intersect(which(Bmarkers[,1]<0.05),which(Bmarkers[,2]>=0.25)),]) down <-rownames(Bmarkers[intersect(which(Bmarkers[,1]<0.05),which(Bmarkers[,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Bcell_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Health Vs.Disease down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Bcell_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Down_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Bcell_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Health Vs.Disease up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Bcell_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() up\uff1a down\uff1a all: IgG Plasma B Cells\u4e9a\u7fa4\u7ec6\u5206 library(Seurat) Stromal <- subset(pbmc, celltype==\"IgG Plasma B Cells\") Stromal <- ScaleData(Stromal, vars.to.regress = c(\"nCount_RNA\", \"percent.mt\"), verbose = FALSE) Stromal <- FindVariableFeatures(Stromal, nfeatures = 2000) Stromal <- RunPCA(Stromal, npcs = 8, verbose = FALSE) Stromal <- FindNeighbors(Stromal, reduction = \"pca\", dims = 1:8) Stromal <- FindClusters(Stromal, resolution = seq(from = 0.1, to = 1.0, by = 0.2)) Stromal <- RunUMAP(Stromal, reduction = \"pca\", dims = 1:8) library(clustree) #clustree(Stromal) Idents(Stromal) <- \"RNA_snn_res.0.5\" Stromal$seurat_clusters <- Stromal@active.ident p<-DimPlot(Stromal, label = T,pt.size = 1) ggsave(\"IgG_Plasma_B_Cells.pdf\", p, width = 12, height = 12) Stromal.markers <- FindAllMarkers(Stromal, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top5 <- Stromal.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC) p <- DoHeatmap(Stromal, features = top5$gene) + NoLegend() ggsave(\"IgG_Plasma_B_CellsHeatmap.pdf\", p, width = 18, height = 12) ########################################### table(Stromal$stim) prop.table(table(Idents(Stromal))) table(Idents(Stromal), Stromal$stim) cluster7.markers <- FindMarkers(Stromal, ident.1 = 7, ident.2 = c(0:6), min.pct = 0.25) up <-rownames(cluster7.markers[intersect(which(cluster7.markers [,1]<0.05),which(cluster7.markers [,2]>=0.25)),]) down <-rownames(cluster5.markers[intersect(which(cluster7.markers [,1]<0.05),which(cluster7.markers [,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Cluster7_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster7 Vs.Cluster0:6 up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Cluster7_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Up_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Cluster7_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster7Vs.Cluster0:6 down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Cluster7_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() \u5065\u5eb7\u7ec4IgG Plasma B Cells\u5927\u591a\u5728\u7b2c\u4e03\u7c07\uff0c\u7b2c\u4e03\u7c07\u4e0e\u5176\u4ed6\u7c07\u7684\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0\u5206\u6790 up: down: all: \u7ec6\u80de\u901a\u8baf-cellphoneDB library(Seurat) library(SeuratData) #SeuratData::InstallData(\"pbmc3k\") #\u4f60\u4eec\u53ef\u4ee5\u4e0d\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6267\u884c\u4e0b\u9762\u4e00\u884c\u4ee3\u7801 pbmc<-readRDS(\"\"/home/xxy/singlecell/All_\u6ce8\u91ca_scRNA.rds\"\") write.table(as.matrix(pbmc@assays$RNA@data), 'cellphonedb_count.txt', sep='\\t', quote=F) meta_data <- cbind(rownames(pbmc@meta.data), pbmc@meta.data[,'celltype', drop=F]) meta_data <- as.matrix(meta_data) meta_data[is.na(meta_data)] = \"Unkown\" # \u7ec6\u80de\u7c7b\u578b\u4e2d\u4e0d\u80fd\u6709NA write.table(meta_data, 'cellphonedb_meta.txt', sep='\\t', quote=F, row.names=F) cellphonedb method statistical_analysis cellphonedb_meta.txt cellphonedb_count.txt --counts-data=gene_name cellphonedb plot dot_plot cellphonedb plot heatmap_plot cellphonedb_meta.txt library(psych) library(qgraph) library(igraph) library(tidyverse) ###count_network.txt\u6765\u6e90\u4e8ecellphonedb\u8dd1\u7684\u7ed3\u679c\uff0c\u5728out\u6587\u4ef6\u5939\u4e2d #netf<- \"count_network.txt\" mynet <- read.delim(\"count_network.txt\", check.names = FALSE) table(mynet$count) mynet %>% filter(count>0) -> mynet # \u6709\u96f6\u4f1a\u62a5\u9519 head(mynet) # SOURCE TARGET count # 1 Memory CD4 T Memory CD4 T 3 # 2 Memory CD4 T B 10 # 3 Memory CD4 T CD14+ Mono 14 # 4 Memory CD4 T NK 15 # 5 Memory CD4 T CD8 T 6 # 6 Memory CD4 T Naive CD4 T 3 net<- graph_from_data_frame(mynet) pdf(\"net.pdf\",width=50,height=15) plot(net) dev.off() #####\u4e3a\u4e86\u7ed9\u8fd9\u4e2a\u7f51\u7edc\u56fe\u7684\u8fb9\u70b9mapping\u4e0a\u4e0d\u540c\u7684\u5c5e\u6027\u5f15\u5165\u4e00\u4e32\u989c\u8272 allcolour=c(\"#DC143C\",\"#0000FF\",\"#20B2AA\",\"#FFA500\",\"#9370DB\", \"#98FB98\",\"#F08080\",\"#1E90FF\",\"#7CFC00\",\"#FFFF00\", \"#808000\",\"#FF00FF\",\"#FA8072\",\"#7B68EE\",\"#9400D3\", \"#800080\",\"#A0522D\",\"#D2B48C\",\"#D2691E\",\"#87CEEB\", \"#40E0D0\",\"#5F9EA0\",\"#FF1493\", \"#FFE4B5\",\"#8A2BE2\",\"#228B22\",\"#E9967A\",\"#4682B4\", \"#32CD32\",\"#F0E68C\",\"#FFFFE0\",\"#EE82EE\",\"#FF6347\", \"#6A5ACD\",\"#9932CC\",\"#8B008B\",\"#8B4513\",\"#DEB887\") karate_groups <- cluster_optimal(net) coords <- layout_in_circle(net, order = order(membership(karate_groups))) # \u8bbe\u7f6e\u7f51\u7edc\u5e03\u5c40 E(net)$width <- E(net)$count/10 # \u8fb9\u70b9\u6743\u91cd\uff08\u7c97\u7ec6\uff09 pdf(\"net2.pdf\",width=18,height=15) plot(net, edge.arrow.size=.1, edge.curved=0, vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=.7) dev.off() ###########\u4f46\u662f\u8fb9\u7684\u989c\u8272\u548c\u70b9\u7684\u989c\u8272\u8fd8\u662f\u5bf9\u5e94\u4e0d\u4e0a\uff0c\u4fee\u6539\u4e00\u756a\u8fb9\u7684\u5c5e\u6027\u3002 net2 <- net # \u590d\u5236\u4e00\u4efd\u5907\u7528 for (i in 1: length(unique(mynet$SOURCE)) ){ E(net)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$color <- allcolour[i] } ###\u628a\u7ebf\u6761\u505a\u6210\u66f2\u7ebf pdf(\"net3.pdf\",width=18,height=15) plot(net, edge.arrow.size=.1, edge.curved=0.2, # \u53ea\u662f\u8c03\u4e86\u8fd9\u4e2a\u53c2\u6570 vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=.7) dev.off() ####\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u7ed8\u5236\u7b2c\u4e8c\u7ec4\u7c7b\u578b\u8d1d\u58f3\u4e00\u6837\u7684\u7f51\u7edc\u56fe length(unique(mynet$SOURCE)) pdf(\"net4.pdf\",width=50,height=50) par(mfrow=c(2,5), mar=c(.3,.3,.3,.3)) for (i in 1: length(unique(mynet$SOURCE)) ){ net1<-net2 E(net1)$count <- \"\" E(net1)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$count <- E(net2)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$count # \u6545\u6280\u91cd\u65bd E(net1)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$color <- allcolour[i] plot(net1, edge.arrow.size=.1, edge.curved=0.4, edge.label = E(net1)$count, # \u7ed8\u5236\u8fb9\u7684\u6743\u91cd vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=1 ) } dev.off()","title":"Analysis Process"},{"location":"Analysisprocess/#10x","text":"","title":"10x\u5206\u6790\u6d41\u7a0b"},{"location":"Analysisprocess/#_1","text":"SRA\u53f7 \u6837\u672c\u540d SRR11955216 Healthy 1 SRR11955217 Healthy 2 SRR11955218 Mild SRR11955219 Severe \u901a\u8fc7NCBI\u5b98\u65b9\u63a8\u8350\u7684prefetch\u6765\u4e0b\u8f7d\u6570\u636e\uff1a prefetch --option-file SRR_lists.txt","title":"\u6570\u636e\u6765\u6e90\u4e0e\u4e0b\u8f7d"},{"location":"Analysisprocess/#fastq","text":"cat sample.txt | while read id do fastq-dump --gzip --split-files -A $id ${id}.sra done \u8fd9\u91cc\u53ea\u8f93\u51fa\u4e86\u4e24\u4e2a\u6587\u4ef6, \u4f46\u662f\u770b\u522b\u7684\u6559\u7a0b\u90fd\u662f\u4e09\u4e2a\u6587\u4ef6, \u5305\u542bindex,barcode+umi\u548creads,sample index\u90a3\u4e2a\u6587\u4ef6\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"\u8f6c\u4e3afastq\u6587\u4ef6"},{"location":"Analysisprocess/#fastq_1","text":"\u6839\u636e10x\u5b98\u7f51\u8bf4\u660e\uff0c\u5728\u540e\u7eed\u5904\u7406\u6570\u636e\u4e4b\u524d\uff0c\u8981\u5148\u66f4\u6539fastq\u6587\u4ef6\u540d\uff1a cat sample.txt | while read id do mv ${id}_1.fastq.gz ${id}_S1_L001_R1_001.fastq.gz; mv ${id}_2.fastq.gz ${id}_S1_L001_R2_001.fastq.gz; done","title":"\u4fee\u6539fastq\u6587\u4ef6\u540d"},{"location":"Analysisprocess/#fastqc","text":"find ./ -name '*R1*.gz' > id_1.txt find ./ -name '*R2*.gz' > id_2.txt cat id_1.txt id_2.txt > id_all.txt cat id_all.txt | xargs fastqc -t 8 -o ./fastqc/","title":"fastqc\u8d28\u91cf\u68c0\u6d4b"},{"location":"Analysisprocess/#cellranger","text":"cellranger\u6709\u591a\u4e2a\u6d41\u7a0b\uff0c\u4e3b\u8981\u67094\u4e2a\u6d41\u7a0b mkfastq\u3001\u5b9a\u91cf count\u3001\u7ec4\u5408 aggr\u3001reanalyze\u3002 \u5982\u679c\u662fbcl\u539f\u59cb\u6d4b\u5e8f\u6570\u636e\uff0c\u9700\u7528mkfastq\u8f6c\u6362\u4e3afastq\u683c\u5f0f(\u6839\u636eindex\u5c06reads\u5206\u914d\u81f3\u4e0d\u540c\u7684\u6837\u672c)\u3002\u5982\u679c\u662ffastq\u683c\u5f0f\u6570\u636e\uff0c\u5219\u53ef\u76f4\u63a5\u7528count\u547d\u4ee4\u5b9a\u91cf\uff0c\u5f97\u5230\u8868\u8fbe\u77e9\u9635\uff0c\u7136\u540e\u7528aggr\u547d\u4ee4\u6574\u5408\u6837\u672c(\u6bd4\u5982\u5b9e\u9a8c\u7ec4\u6709\u591a\u4e2a\u91cd\u590d\u6837\u672c)\uff0c\u6700\u540ereanalyze\u8fdb\u884c\u540e\u7eed\u964d\u7ef4\u805a\u7c7b\u7b49\u7b49\u5206\u6790\u3002 cellranger\u5b89\u88c5\uff1a curl -o cellranger-6.1.2.tar.gz \"https://cf.10xgenomics.com/releases/cell-exp/cellranger-6.1.2.tar.gz?Expires=1652123707&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZi4xMHhnZW5vbWljcy5jb20vcmVsZWFzZXMvY2VsbC1leHAvY2VsbHJhbmdlci02LjEuMi50YXIuZ3oiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2NTIxMjM3MDd9fX1dfQ__&Signature=UweLR-FqWO5mPRCQmE7Cf-C99SOE~Q3jcxhY~HxOBosPmxHtEKoJjbxJayMc1XMPYzT7a-NqDWJ7KsHA0fiSXlB~4RSwzttIxo4KdnOjNGUfA-crtsJAwUbxxy1gjYm6TRABNfQb8O1lM9Wm2u4o80y6uZgDy1Kf3DnVyta-Y3gaQjNzvOVEFPZB8jJk9Eed9rc6jH3l896a-8I6qNuyV5EgoqMnXiKA~Ke0ShK7TMHZjhXJjHOT2cDgbr1Tlz8UR8bwcUuewvtNlVm859SvFkoEPsBiHcOaaEz1vtIJHH709bplvIwtah3-OXdHl5ES5EafqkTi2sdGD-z0lcEhWg__&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA\" \u4e0b\u8f7d\u53c2\u8003\u57fa\u56e0\u7ec4\u6570\u636e: curl -O https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz count\u7ec6\u80de\u5b9a\u91cf \u8fd9\u4e2a\u8fc7\u7a0b\u662f\u6700\u91cd\u8981\u7684\uff0c\u5b83\u5b8c\u6210\u7ec6\u80de\u4e0e\u57fa\u56e0\u7684\u5b9a\u91cf\uff0c\u5b83\u5c06\u6bd4\u5bf9\u3001\u8d28\u63a7\u3001\u5b9a\u91cf\u90fd\u5305\u88c5\u4e86\u8d77\u6765: cat sample.txt | while read id do cellranger count --id=${id} \\ --fastqs=/public/workspace/stu19230111/singlecell/rawdata/data/ \\ --sample=${id} \\ --transcriptome=/public/workspace/stu19230111/singlecell/reference/refdata-gex-GRCh38-2020-A/ done cellranger count\u7ed3\u679c\u89e3\u8bfb \u53c2\u9605 \u5f97\u5230cellranger\u5206\u6790\u7ed3\u679c\u540e\uff0c\u4e0b\u6e38\u6211\u4eec\u9700\u8981\u5c06filtered_gene_bc_matrices \u6587\u4ef6\u5939\u4f5c\u4e3a\u8f93\u5165\u6587\u4ef6\u8f93\u5165\u5230seurat\u6216\u8005scanpy\u3002 filtered_gene_bc_matrices \u6587\u4ef6\u5939\u5305\u542b\u4e09\u4e2a\u6587\u4ef6\uff1abarcodes.tsv\uff1bfeatures.tsv\uff1bmatrix.mtx","title":"cellranger"},{"location":"Analysisprocess/#10xseuratharmony","text":"healthy\u7ec4","title":"\u591a\u4e2a10x\u5355\u7ec6\u80de\u5bf9\u8c61\u7684\u5408\u5e76\u548c\u6279\u6b21\u6821\u6b63\uff1aseurat\u8bfb\u53d6+Harmony\u6574\u5408"},{"location":"Analysisprocess/#_2","text":"","title":"\u4e00. \u591a\u4e2a\u5355\u7ec6\u80de\u6837\u672c\u7684\u5408\u5e76"},{"location":"Analysisprocess/#1","text":"","title":"1. \u8bfb\u53d6\u5e76\u5408\u5e76\u6570\u636e"},{"location":"Analysisprocess/#11","text":"assays <- dir(\"data1/\") names <- rep(\"/raw_feature_bc_matrix\",length(assays)) dir <- paste0(\"data1/\", assays) dir <- paste0(dir,names) # \u6309\u6587\u4ef6\u987a\u5e8f\u7ed9\u6837\u672c\u547d\u540d\uff0c\u540d\u79f0\u4e0d\u8981\u4ee5\u6570\u5b57\u5f00\u5934\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u7a7a\u683c samples_name = assays","title":"1.1 \u8bfb\u53d6\u6570\u636e"},{"location":"Analysisprocess/#12-seurat","text":"scRNAlist <- list() for(i in 1:length(dir)){ counts <- Read10X(data.dir = dir[i]) #\u4e0d\u8bbe\u7f6emin.cells\u8fc7\u6ee4\u57fa\u56e0\u4f1a\u5bfc\u81f4CellCycleScoring\u62a5\u9519\uff1a #Insufficient data values to produce 24 bins. scRNAlist[[i]] <- CreateSeuratObject(counts, project=samples_name[i], min.cells=3, min.features = 200) #\u7ed9\u7ec6\u80debarcode\u52a0\u4e2a\u524d\u7f00\uff0c\u9632\u6b62\u5408\u5e76\u540ebarcode\u91cd\u540d scRNAlist[[i]] <- RenameCells(scRNAlist[[i]], add.cell.id = samples_name[i]) #\u8ba1\u7b97\u7ebf\u7c92\u4f53\u57fa\u56e0\u6bd4\u4f8b if(T){ scRNAlist[[i]][[\"percent.mt\"]] <- PercentageFeatureSet(scRNAlist[[i]], pattern = \"^MT-\") } #\u8ba1\u7b97\u6838\u7cd6\u4f53\u57fa\u56e0\u6bd4\u4f8b if(T){ scRNAlist[[i]][[\"percent.rb\"]] <- PercentageFeatureSet(scRNAlist[[i]], pattern = \"^RP[SL]\") } #\u8ba1\u7b97\u7ea2\u7ec6\u80de\u57fa\u56e0\u6bd4\u4f8b if(T){ HB.genes <- c(\"HBA1\",\"HBA2\",\"HBB\",\"HBD\",\"HBE1\",\"HBG1\",\"HBG2\",\"HBM\",\"HBQ1\",\"HBZ\") HB.genes <- CaseMatch(HB.genes, rownames(scRNAlist[[i]])) scRNAlist[[i]][[\"percent.HB\"]]<-PercentageFeatureSet(scRNAlist[[i]], features=HB.genes) } } ### \u7ed9\u5217\u8868\u547d\u540d\u5e76\u4fdd\u5b58\u6570\u636e dir.create(\"Integrate\") setwd(\"./Integrate\") names(scRNAlist) <- samples_name","title":"1.2 \u6279\u91cf\u521b\u5efaseurat\u5bf9\u8c61"},{"location":"Analysisprocess/#13-mergescrnalistseurat","text":"scRNA <- merge(scRNAlist[[1]], scRNAlist[2:length(scRNAlist)]) scRNA # An object of class Seurat # 18818 features across 19738 samples within 1 assay # Active assay: RNA (18818 features, 0 variable features) table(scRNA$orig.ident)","title":"1.3 \u4f7f\u7528merge\u51fd\u6570\u5c06scRNAlist\u5408\u6210\u4e00\u4e2aSeurat\u5bf9\u8c61"},{"location":"Analysisprocess/#2","text":"","title":"2. \u6570\u636e\u8d28\u63a7"},{"location":"Analysisprocess/#_3","text":"theme.set2 = theme(axis.title.x=element_blank()) # \u8bbe\u7f6e\u7ed8\u56fe\u5143\u7d20 #plot.featrures = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\") plot.featrures = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.rb\", \"percent.HB\") group = \"orig.ident\" # \u8d28\u63a7\u524d\u5c0f\u63d0\u7434\u56fe plots = list() for(i in seq_along(plot.featrures)){ plots[[i]] = VlnPlot(scRNA, group.by=group, pt.size = 0, features = plot.featrures[i]) + theme.set2 + NoLegend()} violin <- wrap_plots(plots = plots, nrow=2) dir.create(\"QC\") ggsave(\"QC/health_vlnplot_before_qc.pdf\", plot = violin, width = 9, height = 8)","title":"\u8d28\u63a7\u524d"},{"location":"Analysisprocess/#_4","text":"minGene=500 maxGene=6000 #maxUMI=15000 pctMT=15 #pctHB=1 ### \u6570\u636e\u8d28\u63a7\u5e76\u7ed8\u5236\u5c0f\u63d0\u7434\u56fe scRNA <- subset(scRNA, subset = nFeature_RNA > minGene & nFeature_RNA < maxGene & percent.mt < pctMT) #scRNA <- subset(scRNA, subset = nCount_RNA < maxUMI & nFeature_RNA > minGene & # nFeature_RNA < maxGene & percent.mt < pctMT & percent.HB < pctHB) plots = list() for(i in seq_along(plot.featrures)){ plots[[i]] = VlnPlot(scRNA, group.by=group, pt.size = 0, features = plot.featrures[i]) + theme.set2 + NoLegend()} violin <- wrap_plots(plots = plots, nrow=2) ggsave(\"QC/health_vlnplot_after_qc.pdf\", plot = violin, width = 10, height = 8)","title":"\u8d28\u63a7\u540e"},{"location":"Analysisprocess/#3-mergeseurat","text":"scRNA <- subset(scRNA, subset = nCount_RNA < maxUMI & nFeature_RNA > minGene & nFeature_RNA < maxGene & percent.mt < pctMT & percent.HB < pctHB) scRNA <- NormalizeData(scRNA) %>% FindVariableFeatures(nfeatures = 2000) %>% ScaleData() scRNA <- RunPCA(scRNA, verbose = F) ElbowPlot(scRNA, ndims = 50) pc.num=1:30 scRNA <- scRNA %>% RunTSNE(dims=pc.num) %>% RunUMAP(dims=pc.num) scRNA <- FindNeighbors(scRNA, dims=pc.num) %>% FindClusters() p <- DimPlot(scRNA, label = T) ggsave(\"health_UMAP_All.pdf\", p, width = 8, height = 6) p <- DimPlot(scRNA, group.by = \"orig.ident\") ggsave(\"health_UMAP_Samples.pdf\", p, width = 8, height = 6) p <- DimPlot(scRNA, group.by = \"orig.ident\", split.by = \"orig.ident\", ncol = 4) ggsave(\"health_UMAP_Samples_Split.pdf\", p, width = 18, height = 12)","title":"3. \u67e5\u770b\u6279\u6b21\u6548\u5e94\uff08\u5bf9merge\u540e\u7684Seurat\u5bf9\u8c61\u8fdb\u884c\u6807\u51c6\u5316\u548c\u964d\u7ef4\uff09"},{"location":"Analysisprocess/#harmony","text":"scRNAlist <- SplitObject(scRNA, split.by = \"orig.ident\") scRNA@meta.data$stim <- c(rep(\"health1\", ncol(scRNAlist[[1]])), rep(\"health2\", ncol(scRNAlist[[2]])))#\u8d4b\u503c\u6761\u4ef6\u53d8\u91cf #\u672a\u7ecf\u6821\u6b63\u7684PC\u4e2d\u7684\u6570\u636e\u96c6\u4e4b\u95f4\u5b58\u5728\u660e\u663e\u5dee\u5f02\uff1a options(repr.plot.height = 5, repr.plot.width = 12) p1 <- DimPlot(object = scRNA, reduction = \"pca\", pt.size = .1, group.by = \"stim\") p2 <- VlnPlot(object = scRNA, features = \"PC_1\", group.by = \"stim\", pt.size = .1) pdf(\"health_harmony\u6574\u5408\u524d.pdf\") plot_grid(p1,p2) dev.off() ###\u8fd0\u884cHarmony\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f20\u9012Seurat\u5bf9\u8c61\u5e76\u6307\u5b9a\u8981\u96c6\u6210\u7684\u53d8\u91cf\u3002RunHarmony\u8fd4\u56deSeurat\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u66f4\u6b63\u540e\u7684Harmony\u5750\u6807\u3002\u8ba9\u6211\u4eec\u5c06plot_convergence\u8bbe\u7f6e\u4e3aTRUE\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u4fddHarmony\u76ee\u6807\u51fd\u6570\u5728\u6bcf\u4e00\u8f6e\u4e2d\u90fd\u53d8\u5f97\u66f4\u597d\u3002 options(repr.plot.height = 2.5, repr.plot.width = 6) scRNA <- scRNA %>% RunHarmony(\"stim\", plot_convergence = TRUE) #\u8981\u76f4\u63a5\u8bbf\u95ee\u65b0\u7684Harmony embeddings\uff0c\u8bf7\u4f7f\u7528Embeddings\u547d\u4ee4\u3002 harmony_embeddings <- Embeddings(scRNA, 'harmony') harmony_embeddings[1:5, 1:5] #\u8ba9\u6211\u4eec\u67e5\u770b\u786e\u8ba4\u6570\u636e\u96c6\u5728Harmony\u8fd0\u884c\u4e4b\u540e\u7684\u524d\u4e24\u4e2a\u7ef4\u5ea6\u4e2d\u5f97\u5230\u5f88\u597d\u7684\u6574\u5408\u3002 options(repr.plot.height = 5, repr.plot.width = 12) p1 <- DimPlot(object = scRNA, reduction = \"harmony\", pt.size = .1, group.by = \"stim\") p2 <- VlnPlot(object = scRNA, features = \"harmony_1\", group.by = \"stim\", pt.size = .1) pdf(\"health_harmony\u6574\u5408\u540e.pdf\") plot_grid(p1,p2) dev.off() \u6574\u5408\u524d\uff1a \u6574\u5408\u540e\uff1a UMAP\u56fe\uff1a scRNA <- scRNA %>% RunUMAP(reduction = \"harmony\", dims = 1:20) %>% FindNeighbors(reduction = \"harmony\", dims = 1:20) %>% FindClusters(resolution = 0.5) %>% identity() #UMAP embedding\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u66f4\u590d\u6742\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u6211\u4eec\u4f7f\u7528harmony embeddings\uff0c\u56e0\u6b64UMAP embeddings\u6df7\u5408\u5f97\u5f88\u597d\u3002 options(repr.plot.height = 4, repr.plot.width = 10) pdf(\"health_harmony_UMAP_embedding.pdf\") DimPlot(scRNA, reduction = \"umap\", group.by = \"stim\", pt.size = .1, split.by = 'stim') dev.off() #\u5728\u8fd9\u79cd\u5145\u5206\u6df7\u5408\u7684\u5d4c\u5165\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4f7f\u7528\u805a\u7c7b\u5206\u6790\u6765\u8bc6\u522b\u7ec6\u80de\u7c7b\u578b\u3002 scRNA=RunUMAP(scRNA,reduction = \"harmony\", dims = 1:20) pdf(\"health_harmony_UMAP_split.pdf\") DimPlot(scRNA,label = T,split.by = 'stim') dev.off() options(repr.plot.height = 4, repr.plot.width = 6) pdf(\"health_harmony_UMAP.pdf\") DimPlot(scRNA, reduction = \"umap\", label = TRUE, pt.size = .1) dev.off() \u6bd4\u8f83\u4e86\u4e24\u540d\u5065\u5eb7\u60a3\u8005\u7684\u6570\u636e\u3002\u6765\u81ea\u8fd9\u4e9b\u5065\u5eb7\u60a3\u8005\u7684\u7ec6\u80de\u975e\u5e38\u76f8\u4f3c\u3002\u4ece\u4e24\u4e2a\u5065\u5eb7\u7259\u9f88\u6d3b\u68c0\u4e2d\u83b7\u5f97\u7684\u6570\u636e\u96c6\u7684\u9ad8\u5ea6\u4e00\u81f4\u6027\u5e76\u653e\u5927\u7814\u7a76\u540e\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u88ab\u5408\u5e76\u5e76\u5904\u7406\u5728\u4e00\u8d77\u4ee5\u8fdb\u884c\u540e\u7eed\u5206\u6790\u3002","title":"\u4e8c. \u6570\u636e\u6574\u5408:harmony"},{"location":"Analysisprocess/#_5","text":"","title":"\u6574\u5408\u75c5\u4f8b\u7ec4\u7ed3\u679c\u5982\u4e0b"},{"location":"Analysisprocess/#_6","text":"","title":"\u7ec6\u80de\u6ce8\u91ca"},{"location":"Analysisprocess/#marker","text":"pbmc <- readRDS(\"./AllIntegrate/All_scRNA.rds\") pbmc <- JackStraw(pbmc, num.replicate = 100) pbmc <- ScoreJackStraw(pbmc, dims = 1:20) JackStrawPlot(pbmc, dims = 1:15) pbmc <- FindNeighbors(pbmc, dims = 1:10) pbmc <- FindClusters(pbmc, resolution = 0.5) head(Idents(pbmc), 5) pbmc <- RunUMAP(pbmc, dims = 1:10) pbmc <- RunTSNE(pbmc, dims = 1:10) pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC) p <- DoHeatmap(pbmc, features = top10$gene) + NoLegend() ggsave(\"Heatmap.pdf\", p, width = 18, height = 12) top1 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 1, wt = avg_log2FC) p <- FeaturePlot(pbmc,features = top1$gene) ggsave(\"Heatmap2.pdf\", p, width = 18, height = 30) p <- FeaturePlot(pbmc,features = c('MZB1','KRT14','CDH1','HOPX','IGFBP5','LAMB3','KRT1','TPSB2','TRAC','CXCR6','LYZ','AIF1','COL1A1','MS4A1','CLDN5','RGS5','MKI67','CLEC9A','IRF8','KDR','TIE1','PTPRC')) ggsave(\"Heatmap1.pdf\", p, width = 18, height = 30) #\u70b9\u56fe markers <- c('MZB1','KRT14','CDH1','HOPX','IGFBP5','LAMB3','KRT1','TPSB2','TRAC','CXCR6','LYZ','AIF1','COL1A1','MS4A1','CLDN5','RGS5','MKI67','CLEC9A','IRF8','KDR','TIE1','PTPRC') DotPlot(pbmc, features = unique(markers),group.by = \"seurat_clusters\")+RotatedAxis()+ scale_x_discrete(\"\")+scale_y_discrete(\"\") ggsave(\"celltype_marker_dot.pdf\",width = 9.5,height = 6) ggsave(\"celltype_marker_dot.pdf\",width = 9.5,height = 6) \u663e\u793a\u7528\u4e8e\u7ec6\u80de\u7c7b\u578b\u5206\u7c7b\u7684\u8c31\u7cfb\u6807\u8bb0\u57fa\u56e0\u7684\u8868\u8fbe\uff1a","title":"\u5bfb\u627e\u9700\u8981\u6ce8\u91ca\u7ec6\u80de\u7684marker\u57fa\u56e0"},{"location":"Analysisprocess/#_7","text":"bfreaname.pbmc <- pbmc new.cluster.ids <- c(\"IgG Plasma B Cells\", \"Epithelial 1\", \"Mast Cells\", \"T Cells\", \"Macrophage 1\", \"Follicular B Cells\", \"Stromal\",\"Memory B Cells\",\"Epithelial 2\", \"Endothelial 1\",\"Perivasular\",\"Macrophage 2\",\"TAGs\",\"DC\",\"pDC\",\"Endothelial 2\") #\u5e2e\u52a9\u5355\u7ec6\u80de\u6d4b\u5e8f\u8fdb\u884c\u6ce8\u91ca\u7684\u6570\u636e\u5e93\uff1a #http://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247502903&idx=2&sn=fd21e6e111f57a4a2b6c987e391068fd&chksm=ec0e09bddb7980abf038f62d03d3beea6249753c8fba69b69f399de9854fc208ca863ca5bc23&mpshare=1&scene=24&srcid=1110SJhxDL8hmNB5BThrgOS9&sharer_sharetime=1604979334616&sharer_shareid=853c5fb0f1636baa0a65973e8b5db684#rd #cellmarker: http://biocc.hrbmu.edu.cn/CellMarker/index.jsp names(new.cluster.ids) <- levels(pbmc) pbmc <- RenameIdents(pbmc, new.cluster.ids) pbmc$celltype <- pbmc@active.ident pdf(\"\u6ce8\u91ca.pdf\") DimPlot(pbmc, reduction = \"umap\", label = TRUE, pt.size = 0.5) + NoLegend() dev.off() p <- DimPlot(pbmc,label = T,split.by = 'stim') ggsave(\"\u6ce8\u91ca_split.pdf\", p, width = 18, height = 12) saveRDS(pbmc, \"All_\u6ce8\u91ca_scRNA.rds\") \u5728\u4e0a\u76ae\u533a\u5ba4\u4e2d\uff0c\u6211\u4eec\u786e\u5b9a\u4e86\u4e09\u4e2a\u4e9a\u7fa4\uff08\u96c6\u7fa41\uff0c8\u548c12\uff09\uff0c\u53ef\u80fd\u5bf9\u5e94\u4e8e\u4e0d\u540c\u7684\u5206\u5316\u9636\u6bb5\u3002\u7c071\u663e\u793a\u5177\u6709HOPX\uff0cIGFBP5\u548cLAMM3\u8868\u8fbe\u7684\u57fa\u7840\u7ec6\u80de\u72b6\u6001;\u548c\u7c078\u662f\u66f4\u6210\u719f\u7684\u7ec6\u80de\u72b6\u6001\uff0c\u8868\u8fbeKRT1\uff0cKRT8\uff0cLAT\uff08\u7528\u4e8e\u6fc0\u6d3bT\u7ec6\u80de\u7684\u8fde\u63a5\u5b50\uff09\u548cPTGER\uff0c\u4e24\u8005\u90fd\u662fTCR\uff08T\u7ec6\u80de\u6297\u539f\u53d7\u4f53\uff09\u4fe1\u53f7\u4f20\u5bfc\uff08\u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3). \u901a\u8fc7\u8868\u8fbe\u589e\u6b96\u7ec6\u80de\uff08\u5982MKI67\u548cTOP2A\uff09\u7684\u89c4\u8303\u6807\u8bb0\u57fa\u56e0\uff0c\u5728\u7b2c12\u7c07\u4e2d\u9274\u5b9a\u589e\u6b96\u57fa\u5e95\u7ec6\u80de\uff08Whitfield\u7b49\u4eba\uff0c2006\uff09; \u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 2).\u6211\u4eec\u8fd8\u6839\u636e\u80f6\u539f\u86cb\u767d\u7684\u8868\u8fbe\u9274\u5b9a\u95f4\u5145\u8d28\uff08\u57fa\u8d28\u6210\u7ea4\u7ef4\u7ec6\u80de\uff09\uff08\u7c076\uff09;\u4e00\u4e2a\u8840\u7ba1\u5468\u56f4\uff0810\u7c07\uff09\u901a\u8fc7\u9ad8\u8868\u8fbePDGFRB\u548cRGS5 (\u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3);\u4e24\u4e2a\u5185\u76ae\uff08\u7c079\u548c15\uff09\uff0c\u5176\u4e2d\u7c079\u7279\u5f02\u6027\u8868\u8fbeCLDN5\u548cEMCN\uff0c\u7c0715\u663e\u793a\u53c2\u4e0e\u8840\u7ba1\u751f\u6210\u8c03\u8282\u7684\u57fa\u56e0\u7684\u9ad8\u8868\u8fbe\uff0c\u4f8b\u5982KDR\uff0cTIE1\u548cSOX18\uff08Jones\u7b49\u4eba\uff0c2001;\u5f17\u6717\u7d22\u74e6\u7b49\u4eba\uff0c2008\u5e74; \u56fe1B\uff0cC; \u56fe 1 \u2014 \u56fe\u8865\u5145 3). B\u7ec6\u80de\u663e\u793a\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u7fa4\u4f53\uff08\u7c070\uff0c5\u548c7\uff09\u4e2d\uff0c\u7c070\u548c5\u5206\u522b\u8868\u8fbe\u6ee4\u6ce1\u548cIgG\u6d46B\u7ec6\u80de\u7684MZB1\uff0cDERL3\u548cIGHG4\u7279\u5f81\uff0c\u7c077\u8868\u8fbeMS4A1\u548cCD37\u5bf9\u5e94\u4e8e\u8bb0\u5fc6B\u7ec6\u80de\u3002T\u7ec6\u80de\u663e\u793a\u5728\u901a\u8fc7\u8868\u8fbe\u89c4\u8303TRM\u6807\u8bb0CXCR6\u9274\u5b9a\u7684\u7c073\u4e2d\u3002","title":"\u7ec6\u80de\u6ce8\u91ca"},{"location":"Analysisprocess/#_8","text":"#table(pbmc$orig.ident)#\u67e5\u770b\u5404\u7ec4\u7ec6\u80de\u6570 table(pbmc$stim) #BM1 BM2 BM3 GM1 GM2 GM3 #2754 747 2158 1754 1528 1983 prop.table(table(Idents(pbmc))) #table(Idents(pbmc), pbmc$orig.ident)#\u5404\u7ec4\u4e0d\u540c\u7ec6\u80de\u7fa4\u7ec6\u80de\u6570 table(Idents(pbmc), pbmc$stim) #Cellratio <- prop.table(table(Idents(scedata), scedata$orig.ident), margin = 2)#\u8ba1\u7b97\u5404\u7ec4\u6837\u672c\u4e0d\u540c\u7ec6\u80de\u7fa4\u6bd4\u4f8b Cellratio <- prop.table(table(Idents(pbmc), pbmc$stim), margin = 2) Cellratio Cellratio <- as.data.frame(Cellratio) colourCount = length(unique(Cellratio$Var1)) library(ggplot2) ################# p<-ggplot(Cellratio) + geom_bar(aes(x =Var2, y= Freq, fill = Var1),stat = \"identity\",width = 0.7,size = 0.5,colour = '#222222')+ theme_classic() + labs(x='Sample',y = 'Ratio')+ coord_flip()+ theme(panel.border = element_rect(fill=NA,color=\"black\", size=0.5, linetype=\"solid\")) ggsave(\"cellrate.pdf\", p, width = 18, height = 12) \u5728\u8f6c\u5f55\u7ec4\u5b66\u6c34\u5e73\u4e0a\uff0c\u7ec6\u80de\u666f\u89c2\u4e3b\u8981\u7531\u7ec6\u80de\u6bd4\u4f8b\u7684\u76f8\u5e94\u53d8\u5316\u3002\u5728\u5065\u5eb7\u65b9\u9762\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6ee4\u6ce1\u548c\u6d46B\u7ec6\u80de\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u8bb0\u5fc6B\u7ec6\u80de\u5728\u8f7b\u5ea6\u6837\u672c\u4e2d\u663e\u793a\u51fa\u663e\u7740\u7684\u589e\u52a0\uff0c\u968f\u540e\u5728\u91cd\u5ea6\u6837\u672c\u4e2d\u3002","title":"\u67e5\u770b\u6bcf\u7ec4\u7684\u7ec6\u80de\u7ec4\u6210"},{"location":"Analysisprocess/#_9","text":"library(Seurat) Stromal <- subset(pbmc, celltype==\"Epithelial 1\" | celltype==\"Epithelial 2\") Stromal <- ScaleData(Stromal, vars.to.regress = c(\"nCount_RNA\", \"percent.mt\"), verbose = FALSE) Stromal <- FindVariableFeatures(Stromal, nfeatures = 2000) Stromal <- RunPCA(Stromal, npcs = 50, verbose = FALSE) Stromal <- FindNeighbors(Stromal, reduction = \"pca\", dims = 1:50) Stromal <- FindClusters(Stromal, resolution = seq(from = 0.1, to = 1.0, by = 0.2)) Stromal <- RunUMAP(Stromal, reduction = \"pca\", dims = 1:50) library(clustree) #clustree(Stromal) Idents(Stromal) <- \"RNA_snn_res.0.5\" Stromal$seurat_clusters <- Stromal@active.ident p<-DimPlot(Stromal, label = T,pt.size = 1) ggsave(\"Stromal.pdf\", p, width = 12, height = 12) Stromal.markers <- FindAllMarkers(Stromal, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top5 <- Stromal.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC) p <- DoHeatmap(Stromal, features = top5$gene) + NoLegend() ggsave(\"StromalHeatmap.pdf\", p, width = 18, height = 12) \u7c070\u4e8e\u5176\u4ed6\u7c07\u4e4b\u95f4\u5dee\u5f02\u57fa\u56e0\u5bcc\u96c6\u5206\u6790 library(msigdbr) library(ggplot2) library(clusterProfiler) library(org.Mm.eg.db) ##\u52a0\u8f7d\u5c0f\u9f20 library(org.Hs.eg.db) ##\u52a0\u8f7d\u4eba\u7c7b library(fgsea) library(dplyr) library(tibble) library(Seurat) cluster5.markers <- FindMarkers(Stromal, ident.1 = 0, ident.2 = c(1:5), min.pct = 0.25) up <-rownames(cluster5.markers[intersect(which(cluster5.markers [,1]<0.05),which(cluster5.markers [,2]>=0.25)),]) down <-rownames(cluster5.markers[intersect(which(cluster5.markers [,1]<0.05),which(cluster5.markers [,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) write.csv(ego.bp, file =\"Cluster5_up_go.csv\") ##\u8f93\u51faup \u57fa\u56e0\u5bcc\u96c6\u7684Go term pdf(\"Cluster5_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster0 Vs.Cluster1:5 up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) write.csv(kk,file =\"Cluster5_up_kegg.csv\") ##\u8f93\u51faup \u57fa\u56e0\u5bcc\u96c6\u7684Kegg term pdf(\"Cluster5_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Up_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) write.csv(ego.bp, file =\"Cluster5_down_go.csv\") ##\u8f93\u51fadown \u57fa\u56e0\u5bcc\u96c6\u7684Go term pdf(\"Cluster5_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster5Vs.Cluster03 down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) write.csv(kk,file =\"Cluster5_down_kegg.csv\") ##\u8f93\u51fadown \u57fa\u56e0\u5bcc\u96c6\u7684Kegg term pdf(\"Cluster5_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() markers = cluster5.markers markers$genes = rownames(markers) cluster.genes<- markers %>% arrange(desc(avg_log2FC)) %>% dplyr::select(genes,avg_log2FC) #\u57fa\u56e0\u6309logFC\u6392\u5e8f ranks<- deframe(cluster.genes) mdb_c2 <- msigdbr(species = \"Homo sapiens\", category = \"C2\")## \u5b9a\u4e49\u57fa\u56e0\u96c6\uff0c\u9009\u53d6C2 fgsea_sets = mdb_c2 [grep(\"^KEGG\",mdb_c2 $gs_name),] %>% split(x = .$gene_symbol, f = .$gs_name) length(fgsea_sets) fgseaRes<- fgsea(fgsea_sets, stats = ranks, nperm = 1000) #\u8fd0\u884cfgsea p <-ggplot(fgseaRes %>% as_tibble() %>% arrange(desc(NES)) %>% filter(pval < 0.05) %>% head(n= 20), aes(reorder(pathway, NES), NES)) + geom_col(aes(fill= NES)) + coord_flip() + labs(x=\"KEGG\", y=\"Normalized Enrichment Score\",title=\"KEGG gene sets NES from GSEA\") ##\u8f93\u51fa\u5dee\u5f02\u6392\u79e9\u524d20\u7684\u6761\u76ee pdf('GSEA-fgsea.pdf',width=8,height=5) print(p) dev.off()","title":"\u4e0a\u76ae\u7ec6\u80de\u4e9a\u7fa4\u7ec6\u5206"},{"location":"Analysisprocess/#_10","text":"","title":"\u62df\u65f6\u5206\u6790"},{"location":"Analysisprocess/#monocle2","text":"library(monocle) ##\u63d0\u53d6\u8868\u578b\u4fe1\u606f--\u7ec6\u80de\u4fe1\u606f(\u5efa\u8bae\u8f7d\u5165\u7ec6\u80de\u7684\u805a\u7c7b\u6216\u8005\u7ec6\u80de\u7c7b\u578b\u9274\u5b9a\u4fe1\u606f\u3001\u5b9e\u9a8c\u6761\u4ef6\u7b49\u4fe1\u606f) expr_matrix <- as(as.matrix(pbmc@assays$RNA@counts), 'sparseMatrix') ##\u63d0\u53d6\u8868\u578b\u4fe1\u606f\u5230p_data(phenotype_data)\u91cc\u9762 p_data <- pbmc@meta.data #p_data$celltype <- pbmc@active.ident ##\u6574\u5408\u6bcf\u4e2a\u7ec6\u80de\u7684\u7ec6\u80de\u9274\u5b9a\u4fe1\u606f\u5230p_data\u91cc\u9762\u3002\u5982\u679c\u5df2\u7ecf\u6dfb\u52a0\u5219\u4e0d\u5fc5\u91cd\u590d\u6dfb\u52a0 ##\u63d0\u53d6\u57fa\u56e0\u4fe1\u606f \u5982\u751f\u7269\u7c7b\u578b\u3001gc\u542b\u91cf\u7b49 f_data <- data.frame(gene_short_name = row.names(pbmc),row.names = row.names(pbmc)) ##expr_matrix\u7684\u884c\u6570\u4e0ef_data\u7684\u884c\u6570\u76f8\u540c(gene number), expr_matrix\u7684\u5217\u6570\u4e0ep_data\u7684\u884c\u6570\u76f8\u540c(cell number) #\u6784\u5efaCDS\u5bf9\u8c61 pd <- new('AnnotatedDataFrame', data = p_data) fd <- new('AnnotatedDataFrame', data = f_data) #\u5c06p_data\u548cf_data\u4ecedata.frame\u8f6c\u6362AnnotatedDataFrame\u5bf9\u8c61\u3002 cds <- newCellDataSet(expr_matrix, phenoData = pd, featureData = fd, lowerDetectionLimit = 0.5, expressionFamily = negbinomial.size()) cds <- estimateSizeFactors(cds) cds <- estimateDispersions(cds) cds <- detectGenes(cds, min_expr = 0.1) #\u8fd9\u4e00\u64cd\u4f5c\u4f1a\u5728fData(cds)\u4e2d\u6dfb\u52a0\u4e00\u5217num_cells_expressed print(head(fData(cds)))#\u6b64\u65f6\u670913714\u4e2a\u57fa\u56e0 expressed_genes <- row.names(subset(fData(cds), num_cells_expressed >= 10)) #\u8fc7\u6ee4\u6389\u5728\u5c0f\u4e8e10\u4e2a\u7ec6\u80de\u4e2d\u8868\u8fbe\u7684\u57fa\u56e0\uff0c\u8fd8\u526911095\u4e2a\u57fa\u56e0\u3002 ##\u4f7f\u7528seurat\u9009\u62e9\u7684\u9ad8\u53d8\u57fa\u56e0\u26a0\ufe0f express_genes <- VariableFeatures(pbmc) cds <- setOrderingFilter(cds, express_genes) plot_ordering_genes(cds) ##\u4f7f\u7528clusters\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0 deg.cluster <- FindAllMarkers(pbmc) express_genes <- subset(deg.cluster,p_val_adj<0.05)$gene cds <- setOrderingFilter(cds, express_genes) plot_ordering_genes(cds) ##\u4f7f\u7528monocle\u9009\u62e9\u7684\u9ad8\u53d8\u57fa\u56e0\u26a0\ufe0f disp_table <- dispersionTable(cds) disp.genes <- subset(disp_table, mean_expression >= 0.1 & dispersion_empirical >= 1 * dispersion_fit)$gene_id cds <- setOrderingFilter(cds, disp.genes) plot_ordering_genes(cds) #\u8fd9\u4e00\u6b65\u8f93\u5165\u7684expressed_genes\u6765\u81ea\u4e8e\u6b65\u9aa44\u3002 #\u26a0\ufe0f\u26a0\ufe0f\u540e\u7eed\u5206\u6790\u4f7f\u7528\u7684\u662f\u8be5\u65b9\u6cd5 #\u4e5f\u53ef\u8f93\u5165seurat\u7b5b\u9009\u51fa\u7684\u9ad8\u53d8\u57fa\u56e0\uff1aexpressed_genes <- VariableFeatures(pbmc) diff <- differentialGeneTest(cds[expressed_genes,],fullModelFormulaStr=\"~celltype\",cores=1) #~\u540e\u9762\u662f\u8868\u793a\u5bf9\u8c01\u505a\u5dee\u5f02\u5206\u6790\u7684\u53d8\u91cf\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u4e3ap_data\u7684\u4efb\u610f\u5217\u540d head(diff) ##\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0\u4f5c\u4e3a\u8f68\u8ff9\u6784\u5efa\u7684\u57fa\u56e0,\u5dee\u5f02\u57fa\u56e0\u7684\u9009\u62e9\u6807\u51c6\u662fqval<0.01,decreasing=F\u8868\u793a\u6309\u6570\u503c\u589e\u52a0\u6392\u5e8f deg <- subset(diff, qval < 0.01) #\u9009\u51fa2829\u4e2a\u57fa\u56e0 deg <- deg[order(deg$qval,decreasing=F),] head(deg) ##\u5dee\u5f02\u57fa\u56e0\u7684\u7ed3\u679c\u6587\u4ef6\u4fdd\u5b58 write.table(deg,file=\"train.monocle.DEG.xls\",col.names=T,row.names=F,sep=\"\\t\",quote=F) ## \u8f68\u8ff9\u6784\u5efa\u57fa\u56e0\u53ef\u89c6\u5316 ordergene <- rownames(deg) cds <- setOrderingFilter(cds, ordergene) #\u8fd9\u4e00\u6b65\u662f\u5f88\u91cd\u8981\u7684\uff0c\u5728\u6211\u4eec\u5f97\u5230\u60f3\u8981\u7684\u57fa\u56e0\u5217\u8868\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528setOrderingFilter\u5c06\u5b83\u5d4c\u5165cds\u5bf9\u8c61\uff0c\u540e\u7eed\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u90fd\u8981\u4f9d\u8d56\u4e8e\u8fd9\u4e2alist\u3002 #setOrderingFilter\u4e4b\u540e\uff0c\u8fd9\u4e9b\u57fa\u56e0\u88ab\u50a8\u5b58\u5728cds@featureData@data[[\"use_for_ordering\"]]\uff0c\u53ef\u4ee5\u901a\u8fc7table(cds@featureData@data[[\"use_for_ordering\"]])\u67e5\u770b pdf(\"train.ordergenes.pdf\") plot_ordering_genes(cds) dev.off() #\u51fa\u7684\u56fe\u9ed1\u8272\u7684\u70b9\u8868\u793a\u7528\u6765\u6784\u5efa\u8f68\u8ff9\u7684\u5dee\u5f02\u57fa\u56e0\uff0c\u7070\u8272\u8868\u793a\u80cc\u666f\u57fa\u56e0\u3002\u7ea2\u8272\u7684\u7ebf\u662f\u6839\u636e\u7b2c2\u6b65\u8ba1\u7b97\u7684\u57fa\u56e0\u8868\u8fbe\u5927\u5c0f\u548c\u79bb\u6563\u5ea6\u5206\u5e03\u7684\u8d8b\u52bf(\u53ef\u4ee5\u770b\u5230\uff0c\u627e\u5230\u7684\u57fa\u56e0\u5c5e\u4e8e\u79bb\u6563\u5ea6\u6bd4\u8f83\u9ad8\u7684\u57fa\u56e0) ordergene <- row.names(deg)[order(deg$qval)][1:400] cds <- reduceDimension(cds, max_components = 2, method = 'DDRTree') cds <- orderCells(cds) #\u26a0\ufe0f\u4f7f\u7528root_state\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u62df\u65f6\u95f4\u8f74\u7684\u6839\uff0c\u5982\u4e0b\u9762\u7684\u62df\u65f6\u95f4\u7740\u8272\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5de6\u8fb9\u662f\u6839\u3002\u6839\u636estate\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u6839\u662fState1\uff0c\u82e5\u8981\u60f3\u628a\u53e6\u4e00\u7aef\u8bbe\u4e3a\u6839\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u64cd\u4f5c #cds <- orderCells(cds, root_state = 5) #\u628aState5\u8bbe\u6210\u62df\u65f6\u95f4\u8f74\u7684\u8d77\u59cb\u70b9 pdf(\"train.monocle.pseudotime.pdf\",width = 7,height = 7) plot_cell_trajectory(cds,color_by=\"Pseudotime\", size=1,show_backbone=TRUE) dev.off() pdf(\"train.monocle.celltype.pdf\",width = 7,height = 7) plot_cell_trajectory(cds,color_by=\"celltype\", size=1,show_backbone=TRUE) dev.off() pdf(\"train.monocle.state.pdf\",width = 7,height = 7) plot_cell_trajectory(cds, color_by = \"State\",size=1,show_backbone=TRUE) dev.off() pdf(\"seurat.clusters.pdf\",width = 7,height = 7) plot_cell_trajectory(cds, color_by = \"seurat_clusters\") dev.off() library(ggsci) p1=plot_cell_trajectory(cds, color_by = \"cell_type\") + scale_color_npg() p2=plot_cell_trajectory(cds, color_by = \"State\") + scale_color_nejm() colour=c(\"#DC143C\",\"#0000FF\",\"#20B2AA\",\"#FFA500\",\"#9370DB\",\"#98FB98\",\"#F08080\") p3=plot_cell_trajectory(cds, color_by = \"State\") + scale_color_manual(values = colour) p1|p2|p3 p1 <- plot_cell_trajectory(cds, x = 1, y = 2, color_by = \"celltype\") + theme(legend.position='none',panel.border = element_blank()) p2 <- plot_complex_cell_trajectory(cds, x = 1, y = 2, color_by = \"celltype\")+ theme(legend.title = element_blank()) ggsave(\"tree+train.monocle.celltype.pdf\", p1|p2, width = 18, height = 9) library(ggpubr) df <- pData(cds) p<-ggplot(df, aes(Pseudotime, colour = celltype, fill=celltype)) + geom_density(bw=0.5,size=1,alpha = 0.5)+theme_classic2() ggsave(\"cellmidu.pdf\", p, width = 18, height = 12) #\u8fd9\u91cc\u662f\u628a\u6392\u5e8f\u57fa\u56e0\uff08ordergene\uff09\u63d0\u53d6\u51fa\u6765\u505a\u56de\u5f52\u5206\u6790\uff0c\u6765\u627e\u5b83\u4eec\u662f\u5426\u8ddf\u62df\u65f6\u95f4\u6709\u663e\u8457\u7684\u5173\u7cfb #\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u5c31\u4f1a\u7528\u6240\u6709\u57fa\u56e0\u6765\u505a\u5b83\u4eec\u4e0e\u62df\u65f6\u95f4\u7684\u76f8\u5173\u6027 Time_diff <- differentialGeneTest(cds[ordergene,], cores = 1, fullModelFormulaStr = \"~sm.ns(Pseudotime)\") Time_diff <- Time_diff[,c(5,2,3,4,1,6,7)] #\u628agene\u653e\u524d\u9762\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u6539 write.csv(Time_diff, \"Time_diff_all.csv\", row.names = F) Time_genes <- Time_diff %>% pull(gene_short_name) %>% as.character() p=plot_pseudotime_heatmap(cds[Time_genes,], num_clusters=16, show_rownames=T, return_heatmap=T) ggsave(\"Time_heatmapAll.pdf\", p, width = 5, height = 10)","title":"Monocle2"},{"location":"Analysisprocess/#monocle3","text":"library(Seurat) library(monocle3) library(tidyverse) library(patchwork) rm(list=ls()) dir.create(\"Monocle3\") setwd(\"Monocle3\") data <- GetAssayData(pbmc, assay = 'RNA', slot = 'counts') cell_metadata <- pbmc@meta.data gene_annotation <- data.frame(gene_short_name = rownames(data)) rownames(gene_annotation) <- rownames(data) cds <- new_cell_data_set(data, cell_metadata = cell_metadata, gene_metadata = gene_annotation) cds <- preprocess_cds(cds, num_dim = 50) pdf(\"1.pdf\") plot_pc_variance_explained(cds) dev.off() cds <- reduce_dimension(cds,preprocess_method = \"PCA\") #preprocess_method\u9ed8\u8ba4\u662fPCA pdf(\"2.pdf\") plot_cells(cds) dev.off() p1 <- plot_cells(cds, reduction_method=\"UMAP\", color_cells_by=\"seurat_clusters\") + ggtitle('cds.umap') ##\u4eceseurat\u5bfc\u5165\u6574\u5408\u8fc7\u7684umap\u5750\u6807 cds.embed <- cds@int_colData$reducedDims$UMAP int.embed <- Embeddings(pbmc, reduction = \"umap\") int.embed <- int.embed[rownames(cds.embed),] cds@int_colData$reducedDims$UMAP <- int.embed p2 <- plot_cells(cds, reduction_method=\"UMAP\", color_cells_by=\"seurat_clusters\") + ggtitle('int.umap') p = p1|p2 ggsave(\"Reduction_Compare.pdf\", plot = p, width = 10, height = 5) cds <- reduce_dimension(cds, reduction_method=\"tSNE\") cds <- cluster_cells(cds) cds <- learn_graph(cds) p = plot_cells(cds, color_cells_by = \"celltype\", label_groups_by_cluster=FALSE, label_leaves=FALSE, label_branch_points=FALSE) ggsave(\"Trajectory.pdf\", plot = p, width = 8, height = 6) p<-plot_cells(cds, color_cells_by = \"celltype\", label_groups_by_cluster=FALSE, label_leaves=TRUE, label_branch_points=TRUE,graph_label_size=1.5) ggsave(\"Trajectory1.pdf\", plot = p, width = 8, height = 6) ### get_earliest_principal_node <- function(cds, time_bin=\"IgG Plasma B Cells\"){ cell_ids <- which(colData(cds)[, \"celltype\"] == time_bin) closest_vertex <-cds@principal_graph_aux[[\"UMAP\"]]$pr_graph_cell_proj_closest_vertex closest_vertex <- as.matrix(closest_vertex[colnames(cds), ]) root_pr_nodes <- igraph::V(principal_graph(cds)[[\"UMAP\"]])$name[as.numeric(names(which.max(table(closest_vertex[cell_ids,]))))] root_pr_nodes } cds = order_cells(cds, root_pr_nodes=get_earliest_principal_node(cds)) p<-plot_cells(cds, color_cells_by = \"pseudotime\", label_cell_groups=FALSE, label_leaves=TRUE, label_branch_points=FALSE, show_trajectory_graph = TRUE) ggsave(\"Trajectory2.pdf\", plot = p, width = 8, height = 6)","title":"Monocle3"},{"location":"Analysisprocess/#rna-velocity","text":"library(velocyto.R) input_loom <- \"severe.loom\" ldat <- read.loom.matrices(input_loom) emat <- ldat$spliced emat <- emat[,colSums(emat)>=1e3] #install.packages(\"pagoda2\") library(pagoda2) rownames(emat) <- make.unique(rownames(emat)) r <- Pagoda2$new(emat,modelType='plain',trim=10,log.scale=T) r$adjustVariance(plot=T,do.par=T,gam.k=10) r$calculatePcaReduction(nPcs=100,n.odgenes=3e3,maxit=300) r$makeKnnGraph(k=30,type='PCA',center=T,distance='cosine') r$getKnnClusters(method=multilevel.community,type='PCA',name='multilevel') r$getEmbedding(type='PCA',embeddingType='tSNE',perplexity=50,verbose=T) pdf(\"r_plotEmbedding.pdf\",width=15,height=15) r$plotEmbedding(type='PCA',embeddingType='tSNE',show.legend=F,mark.clusters=T,min.group.size=10,shuffle.colors=F,mark.cluster.cex=1,alpha=0.3,main='cell clusters') dev.off() #\u6b64\u884c\u4ee3\u7801\u4f1a\u62a5\u9519r$plotEmbedding(type='PCA',embeddingType='tSNE',colors=r$counts[,\"Xist\"],main='Xist') emat <- ldat$spliced nmat <- ldat$unspliced emat <- emat[,rownames(r$counts)] nmat <- nmat[,rownames(r$counts)] # restrict to cells that passed p2 filter cluster.label <- r$clusters$PCA[[1]] cell.colors <- sccore::fac2col(cluster.label) emb <- r$embeddings$PCA$tSNE cell.dist <- as.dist(1-armaCor(t(r$reductions$PCA))) emat <- filter.genes.by.cluster.expression(emat,cluster.label,min.max.cluster.average = 0.5) nmat <- filter.genes.by.cluster.expression(nmat,cluster.label,min.max.cluster.average = 0.05) length(intersect(rownames(emat),rownames(emat))) fit.quantile <- 0.02 rvel.cd <- gene.relative.velocity.estimates(emat,nmat,deltaT=1,kCells=20,cell.dist=cell.dist,fit.quantile=fit.quantile) pdf(\"show.velocity.on.embedding.cor.pdf\",width=15,height=15) show.velocity.on.embedding.cor(emb,rvel.cd,n=300,scale='sqrt',cell.colors=ac(cell.colors,alpha=0.5),cex=0.8,arrow.scale=5,show.grid.flow=TRUE,min.grid.cell.mass=0.5,grid.n=40,arrow.lwd=1,do.par=F,cell.border.alpha = 0.1) dev.off()","title":"RNA Velocity"},{"location":"Analysisprocess/#igg-plasma-b-cells","text":"library(msigdbr) library(ggplot2) library(clusterProfiler) library(org.Mm.eg.db) ##\u52a0\u8f7d\u5c0f\u9f20 library(org.Hs.eg.db) ##\u52a0\u8f7d\u4eba\u7c7b library(fgsea) library(dplyr) library(tibble) library(Seurat) Bcell <- subset(pbmc, celltype==\"IgG Plasma B Cells\") cell_selection <- SetIdent(Bcell, value = \"stim\") Bmarkers <- FindMarkers(cell_selection, ident.1 = \"health\", ident.2 = c(\"mild\",\"severe\"), min.pct = 0.25) up <-rownames(Bmarkers[intersect(which(Bmarkers[,1]<0.05),which(Bmarkers[,2]>=0.25)),]) down <-rownames(Bmarkers[intersect(which(Bmarkers[,1]<0.05),which(Bmarkers[,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Bcell_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Health Vs.Disease down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Bcell_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Down_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Bcell_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Health Vs.Disease up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Bcell_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() up\uff1a down\uff1a all:","title":"IgG Plasma B Cells\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0"},{"location":"Analysisprocess/#igg-plasma-b-cells_1","text":"library(Seurat) Stromal <- subset(pbmc, celltype==\"IgG Plasma B Cells\") Stromal <- ScaleData(Stromal, vars.to.regress = c(\"nCount_RNA\", \"percent.mt\"), verbose = FALSE) Stromal <- FindVariableFeatures(Stromal, nfeatures = 2000) Stromal <- RunPCA(Stromal, npcs = 8, verbose = FALSE) Stromal <- FindNeighbors(Stromal, reduction = \"pca\", dims = 1:8) Stromal <- FindClusters(Stromal, resolution = seq(from = 0.1, to = 1.0, by = 0.2)) Stromal <- RunUMAP(Stromal, reduction = \"pca\", dims = 1:8) library(clustree) #clustree(Stromal) Idents(Stromal) <- \"RNA_snn_res.0.5\" Stromal$seurat_clusters <- Stromal@active.ident p<-DimPlot(Stromal, label = T,pt.size = 1) ggsave(\"IgG_Plasma_B_Cells.pdf\", p, width = 12, height = 12) Stromal.markers <- FindAllMarkers(Stromal, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25) library(dplyr) top5 <- Stromal.markers %>% group_by(cluster) %>% top_n(n = 5, wt = avg_log2FC) p <- DoHeatmap(Stromal, features = top5$gene) + NoLegend() ggsave(\"IgG_Plasma_B_CellsHeatmap.pdf\", p, width = 18, height = 12) ########################################### table(Stromal$stim) prop.table(table(Idents(Stromal))) table(Idents(Stromal), Stromal$stim) cluster7.markers <- FindMarkers(Stromal, ident.1 = 7, ident.2 = c(0:6), min.pct = 0.25) up <-rownames(cluster7.markers[intersect(which(cluster7.markers [,1]<0.05),which(cluster7.markers [,2]>=0.25)),]) down <-rownames(cluster5.markers[intersect(which(cluster7.markers [,1]<0.05),which(cluster7.markers [,2]<=(-0.25))),]) ##\u8bc6\u522bup \uff0cdown genes gs = bitr(up, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Cluster7_up_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster7 Vs.Cluster0:6 up gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Cluster7_up_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_Up_biological\")) #\u5c55\u793a\u524d\u5341\u4e2a\u6761\u76ee dev.off() gs = bitr(down, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\") head(gs) ego.bp = enrichGO(gene=gs$ENTREZID, OrgDb = org.Hs.eg.db,ont= \"BP\",pAdjustMethod = \"BH\",pvalueCutoff= 0.05,qvalueCutoff= 0.2,readable= TRUE) head(ego.bp) pdf(\"Cluster7_down_go.pdf\", height =5, width = 10) print(dotplot(ego.bp, showCategory=10,title=\"Cluster7Vs.Cluster0:6 down gene GoTerm\")) dev.off() kk <- enrichKEGG(gene= gs$ENTREZID, organism = 'hsa',pvalueCutoff = 0.05) pdf(\"Cluster7_down_kegg.pdf\", height =5, width = 10) print(dotplot(kk, showCategory=10,title=\"KEGG_biological\")) dev.off() \u5065\u5eb7\u7ec4IgG Plasma B Cells\u5927\u591a\u5728\u7b2c\u4e03\u7c07\uff0c\u7b2c\u4e03\u7c07\u4e0e\u5176\u4ed6\u7c07\u7684\u5dee\u5f02\u8868\u8fbe\u57fa\u56e0\u5206\u6790 up: down: all:","title":"IgG Plasma B Cells\u4e9a\u7fa4\u7ec6\u5206"},{"location":"Analysisprocess/#-cellphonedb","text":"library(Seurat) library(SeuratData) #SeuratData::InstallData(\"pbmc3k\") #\u4f60\u4eec\u53ef\u4ee5\u4e0d\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u76f4\u63a5\u6267\u884c\u4e0b\u9762\u4e00\u884c\u4ee3\u7801 pbmc<-readRDS(\"\"/home/xxy/singlecell/All_\u6ce8\u91ca_scRNA.rds\"\") write.table(as.matrix(pbmc@assays$RNA@data), 'cellphonedb_count.txt', sep='\\t', quote=F) meta_data <- cbind(rownames(pbmc@meta.data), pbmc@meta.data[,'celltype', drop=F]) meta_data <- as.matrix(meta_data) meta_data[is.na(meta_data)] = \"Unkown\" # \u7ec6\u80de\u7c7b\u578b\u4e2d\u4e0d\u80fd\u6709NA write.table(meta_data, 'cellphonedb_meta.txt', sep='\\t', quote=F, row.names=F) cellphonedb method statistical_analysis cellphonedb_meta.txt cellphonedb_count.txt --counts-data=gene_name cellphonedb plot dot_plot cellphonedb plot heatmap_plot cellphonedb_meta.txt library(psych) library(qgraph) library(igraph) library(tidyverse) ###count_network.txt\u6765\u6e90\u4e8ecellphonedb\u8dd1\u7684\u7ed3\u679c\uff0c\u5728out\u6587\u4ef6\u5939\u4e2d #netf<- \"count_network.txt\" mynet <- read.delim(\"count_network.txt\", check.names = FALSE) table(mynet$count) mynet %>% filter(count>0) -> mynet # \u6709\u96f6\u4f1a\u62a5\u9519 head(mynet) # SOURCE TARGET count # 1 Memory CD4 T Memory CD4 T 3 # 2 Memory CD4 T B 10 # 3 Memory CD4 T CD14+ Mono 14 # 4 Memory CD4 T NK 15 # 5 Memory CD4 T CD8 T 6 # 6 Memory CD4 T Naive CD4 T 3 net<- graph_from_data_frame(mynet) pdf(\"net.pdf\",width=50,height=15) plot(net) dev.off() #####\u4e3a\u4e86\u7ed9\u8fd9\u4e2a\u7f51\u7edc\u56fe\u7684\u8fb9\u70b9mapping\u4e0a\u4e0d\u540c\u7684\u5c5e\u6027\u5f15\u5165\u4e00\u4e32\u989c\u8272 allcolour=c(\"#DC143C\",\"#0000FF\",\"#20B2AA\",\"#FFA500\",\"#9370DB\", \"#98FB98\",\"#F08080\",\"#1E90FF\",\"#7CFC00\",\"#FFFF00\", \"#808000\",\"#FF00FF\",\"#FA8072\",\"#7B68EE\",\"#9400D3\", \"#800080\",\"#A0522D\",\"#D2B48C\",\"#D2691E\",\"#87CEEB\", \"#40E0D0\",\"#5F9EA0\",\"#FF1493\", \"#FFE4B5\",\"#8A2BE2\",\"#228B22\",\"#E9967A\",\"#4682B4\", \"#32CD32\",\"#F0E68C\",\"#FFFFE0\",\"#EE82EE\",\"#FF6347\", \"#6A5ACD\",\"#9932CC\",\"#8B008B\",\"#8B4513\",\"#DEB887\") karate_groups <- cluster_optimal(net) coords <- layout_in_circle(net, order = order(membership(karate_groups))) # \u8bbe\u7f6e\u7f51\u7edc\u5e03\u5c40 E(net)$width <- E(net)$count/10 # \u8fb9\u70b9\u6743\u91cd\uff08\u7c97\u7ec6\uff09 pdf(\"net2.pdf\",width=18,height=15) plot(net, edge.arrow.size=.1, edge.curved=0, vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=.7) dev.off() ###########\u4f46\u662f\u8fb9\u7684\u989c\u8272\u548c\u70b9\u7684\u989c\u8272\u8fd8\u662f\u5bf9\u5e94\u4e0d\u4e0a\uff0c\u4fee\u6539\u4e00\u756a\u8fb9\u7684\u5c5e\u6027\u3002 net2 <- net # \u590d\u5236\u4e00\u4efd\u5907\u7528 for (i in 1: length(unique(mynet$SOURCE)) ){ E(net)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$color <- allcolour[i] } ###\u628a\u7ebf\u6761\u505a\u6210\u66f2\u7ebf pdf(\"net3.pdf\",width=18,height=15) plot(net, edge.arrow.size=.1, edge.curved=0.2, # \u53ea\u662f\u8c03\u4e86\u8fd9\u4e2a\u53c2\u6570 vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=.7) dev.off() ####\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u7ed8\u5236\u7b2c\u4e8c\u7ec4\u7c7b\u578b\u8d1d\u58f3\u4e00\u6837\u7684\u7f51\u7edc\u56fe length(unique(mynet$SOURCE)) pdf(\"net4.pdf\",width=50,height=50) par(mfrow=c(2,5), mar=c(.3,.3,.3,.3)) for (i in 1: length(unique(mynet$SOURCE)) ){ net1<-net2 E(net1)$count <- \"\" E(net1)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$count <- E(net2)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$count # \u6545\u6280\u91cd\u65bd E(net1)[map(unique(mynet$SOURCE),function(x) { get.edge.ids(net,vp = c(unique(mynet$SOURCE)[i],x)) })%>% unlist()]$color <- allcolour[i] plot(net1, edge.arrow.size=.1, edge.curved=0.4, edge.label = E(net1)$count, # \u7ed8\u5236\u8fb9\u7684\u6743\u91cd vertex.color=allcolour, vertex.frame.color=\"#555555\", vertex.label.color=\"black\", layout = coords, vertex.label.cex=1 ) } dev.off()","title":"\u7ec6\u80de\u901a\u8baf-cellphoneDB"},{"location":"resultanalysis/","text":"summary 1.\u5728\u8f6c\u5f55\u7ec4\u5b66\u6c34\u5e73\u4e0a\uff0c\u7ec6\u80de\u666f\u89c2\u4e3b\u8981\u7531\u7ec6\u80de\u6bd4\u4f8b\u7684\u76f8\u5e94\u53d8\u5316\u3002\u5728\u5065\u5eb7\u65b9\u9762\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6ee4\u6ce1\u548c\u6d46B\u7ec6\u80de\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u8bb0\u5fc6B\u7ec6\u80de\u5728\u8f7b\u5ea6\u6837\u672c\u548c\u91cd\u5ea6\u6837\u672c\u4e2d\u663e\u793a\u51fa\u663e\u7740\u7684\u589e\u52a0\u3002 2.\u5728IgG\u8840\u6d46B\u7ec6\u80de\u7684\u5dee\u5f02\u57fa\u56e0\u5bcc\u96c6\u5206\u6790\u4e2d\uff0c\u5bcc\u96c6\u5230\u4e86\u51a0\u72b6\u75c5\u6bd2\u75c5\u2212covid\u221219\u3001\u7231\u6cfc\u65af\u5766\u2212Barr\u75c5\u6bd2\u611f\u67d3\u3001\u75b1\u75b9\u75c5\u6bd2\u611f\u67d3\u3001\u52a8\u8109\u7ca5\u6837\u786c\u5316\u7b49\u901a\u8def\u3002 PubMed\u641c\u7d22\u7ed3\u679c\uff1a \u7259\u5468\u708e\u4e0eICU\u5165\u9662\u98ce\u9669\u589e\u52a0\u3001\u9700\u8981\u8f85\u52a9\u901a\u6c14\u548cCOVID-19\u60a3\u8005\u6b7b\u4ea1\u4ee5\u53ca\u8840\u6db2\u4e2d\u4e0e\u75be\u75c5\u7ed3\u5c40\u6076\u5316\u76f8\u5173\u7684\u751f\u7269\u6807\u5fd7\u7269\u6c34\u5e73\u5347\u9ad8\u6709\u5173\u3002 \u4e9a\u7ec4\u5206\u6790\u7ed3\u679c\u8868\u660e\uff0cEB\u75c5\u6bd2\u4e0e\u7259\u5468\u708e\u7684\u76f8\u5173\u6027\u5728\u4e9a\u6d32\u3001\u6b27\u6d32\u548c\u7f8e\u56fd\u4eba\u7fa4\u4e2d\u5177\u6709\u663e\u8457\u6027\uff08P<0.001;P = 0.04;P = 0.003\uff0c\u4f46\u4e0d\u5305\u62ec\u975e\u6d32\u4eba\u53e3\uff08P = 0.29\uff09)\u3002 \u8fc7\u53bb\u4e94\u5e74\u53d1\u8868\u7684\u603b\u51716\u9879\u75c5\u4f8b\u5bf9\u7167\u548c\u961f\u5217\u7814\u7a76\u6d41\u884c\u75c5\u5b66\u7814\u7a76\uff0c\u8fd9\u4e9b\u7814\u7a76\u8868\u660e\uff0c\u4e0e\u6ca1\u6709\u7259\u5468\u708e\u6216\u4e0d\u592a\u4e25\u91cd\u7684\u7259\u5468\u708e\u7684\u60a3\u8005\u76f8\u6bd4\uff0c\u4e34\u5e8a\u8bca\u65ad\u7684\u7259\u5468\u708e\u6216\u66f4\u4e25\u91cd\u7684\u7259\u5468\u708e\u60a3\u8005\u53d1\u751f\u7b2c\u4e00\u6b21\u51a0\u72b6\u52a8\u8109\u4e8b\u4ef6\u7684\u98ce\u9669\u589e\u52a0\u3002 \u5728\u7f8e\u56fd\u5bf9\u7537\u6027\u9000\u4f0d\u519b\u4eba\u8fdb\u884c\u7684\u4e00\u9879\u524d\u77bb\u6027\u961f\u5217\u7814\u7a76\u62a5\u544a\uff0c\u7259\u5468\u708e\uff08\u901a\u8fc7\u653e\u5c04\u6210\u50cf\u9aa8\u8d28\u6d41\u5931\u7684\u4e25\u91cd\u7a0b\u5ea6\u6d4b\u91cf\uff09\u4e0ePAD\u572825\u81f330\u5e74\u7684\u968f\u8bbf\u671f\u5185\u7684\u53d1\u75c5\u7387\u4e4b\u95f4\u5b58\u5728\u6b63\u76f8\u5173\uff0c\u8c03\u6574\u540e\u7684OR\u4e3a2.3\u3002 \u7591\u95ee\uff1a\u5df2\u53d1\u8868\u7684\u5173\u4e8e\u65b0\u51a0\u3001EB\u3001\u75b1\u75b9\u3001\u5fc3\u8840\u7ba1\u75be\u75c5\u4e0e\u7259\u5468\u708e\u7684\u7814\u7a76\u5927\u591a\u96c6\u4e2d\u5728\u7edf\u8ba1\u5b66\u5173\u8054\u5206\u6790\u4e0a\uff0c\u5355\u7ec6\u80de\u6d4b\u5e8f\u662f\u5426\u5728\u5176\u7814\u7a76\u4e0a\u80fd\u591f\u66f4\u8fdb\u4e00\u6b65\uff1f \u5728\u68c0\u7d22\u5355\u7ec6\u80de\u8f6c\u5f55\u7ec4\u5e94\u7528\u4e8e\u4e0e\u5176\u4ed6\u75be\u75c5\u8054\u5408\u5206\u6790\u65f6\uff0c\u53ea\u53d1\u73b0\u4e86\u4e00\u7bc7\u6587\u732e\uff08\u53ef\u80fd\u662f\u6211\u641c\u7d22\u6709\u95ee\u9898\uff09\uff1a \u7531\u4e8e\u6ca1\u6709\u6743\u9650\uff0c\u53ea\u80fd\u770b\u5230\u8be5\u7bc7\u6587\u7ae0\u7684\u6458\u8981\uff1a\u5728\u53d6\u6837\u7684\u9009\u62e9\u65b9\u9762\uff0c\u4ed6\u9009\u62e9\u4e86\u5065\u5eb7\u4eba\u3001\u7259\u5468\u708e\u60a3\u8005\u548c\u60a3\u6709T2DM\u7684\u7259\u5468\u708e\u60a3\u8005\u7684\u7259\u9f88\u7ec4\u7ec7\uff0c\u7814\u7a76\u5176\u4e2d\u7684\u5de8\u566c\u7ec6\u80de\uff0c\u5468\u708e\u4e2d\u7684\u5927\u591a\u6570\u5de8\u566c\u7ec6\u80de\u8868\u8fbe\u5355\u6838\u7ec6\u80de\u8c31\u7cfb\u6807\u5fd7\u7269CD14\uff0c\u5728\u60a3\u6709T2DM\u7684\u7259\u5468\u708e\u60a3\u8005\u7684\u7259\u9f88\u5de8\u566c\u7ec6\u80de\u4e2d\u53d1\u73b0\u4e86RELA\uff08NF-\u03baB\u8f6c\u5f55\u56e0\u5b50\u590d\u5408\u7269\u7684\u4e9a\u57fa\uff09\u7684\u9ad8\u8868\u8fbe\u548c\u6fc0\u6d3b\u3002\u53d1\u73b0\u5de8\u566c\u7ec6\u80de\u7684\u5f02\u8d28\u6027\u548c\u9ad8\u708e\u75c7\u6fc0\u6d3b\u53ef\u80fd\u4e0e\u7259\u5468\u708e\u7684\u53d1\u75c5\u673a\u5236\u548c\u7ed3\u679c\u6709\u5173\uff0c\u5e76\u4e14\u5728T2DM\u60a3\u8005\u4e2d\u53ef\u80fd\u8fdb\u4e00\u6b65\u589e\u5f3a\u3002 \u8fd9\u8fb9\u4e3a\u4f55\u9009\u62e9\u5de8\u566c\u7ec6\u80de\uff1f \u6211\u4e4b\u524d\u5f97\u5230\u7684\u5bcc\u96c6\u5206\u6790\u7ed3\u679c\u90fd\u662f\u57fa\u4e8e\u7684IgG\u8840\u6d46B\u7ec6\u80de\uff0c\u662f\u5426\u53ef\u4ee5\u9009\u62e9\u8fd9\u7c7b\u7ec6\u80de\uff1f \u7531\u4e8e\u8fd9\u7c7b\u7ec6\u80de\u542b\u91cf\u5728\u5065\u5eb7\u548c\u60a3\u8005\u4e2d\u7684\u542b\u91cf\u5dee\u5f02\u5de8\u5927\uff0c\u7ed3\u679c\u662f\u5426\u53ef\u4fe1\uff1f\uff08\u7531\u4e8e\u4e4b\u524d\u7684\u6ce8\u91ca\u7ed3\u679c\u5e76\u4e0d\u662f\u5f88\u51c6\u786e\uff0c\u6211\u6682\u4e14\u5c1d\u8bd5\u4e86\u6ce8\u91ca\u7684\u4e0a\u76ae\u7ec6\u80de\uff0c\u5728\u4ed6\u7684\u5bcc\u96c6\u5206\u6790\u4e2d\u5f97\u5230\u4e86\u7c7b\u4f3c\u7684\u7ed3\u679c\uff09 \u518d\u8fdb\u4e00\u6b65\u4e9a\u7fa4\u7ec6\u5206\u4e2d\uff0c\u5206\u6210\u4e868\u7c7b\uff0c\u5065\u5eb7\u4eba\u7684\u7ec6\u80de\u7c7b\u578b\u4f3c\u4e4e\u53ea\u5728\u5176\u4e2d\u7684\u4e00\u7c07\u4e2d\uff0c\u5176\u4ed6\u7c07\u4e0e\u8fd9\u4e2a\u7c07\u4e4b\u95f4\u5dee\u5f02\u57fa\u56e0\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u836f\u7269\u9776\u57fa\u56e0\u3002\uff08\u4f46\u662f\u6211\u89c9\u5f97\u7528IgG\u8840\u6d46B\u7ec6\u80de\u662f\u6781\u5ea6\u4e0d\u5408\u7406\u7684\uff0c\u5065\u5eb7\u4eba\u4e2d\u7684\u7ec6\u80de\u6570\u5b9e\u5728\u592a\u5c11\uff0c\u9009\u8fd9\u7c7b\u7ec6\u80de\u505a\u4e3b\u8981\u662f\u5bf9\u5176\u6ce8\u91ca\u6bd4\u8f83\u786e\u4fe1\uff09","title":"Result Analysis"},{"location":"resultanalysis/#summary","text":"1.\u5728\u8f6c\u5f55\u7ec4\u5b66\u6c34\u5e73\u4e0a\uff0c\u7ec6\u80de\u666f\u89c2\u4e3b\u8981\u7531\u7ec6\u80de\u6bd4\u4f8b\u7684\u76f8\u5e94\u53d8\u5316\u3002\u5728\u5065\u5eb7\u65b9\u9762\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u6ee4\u6ce1\u548c\u6d46B\u7ec6\u80de\u7684\u6570\u91cf\u5f88\u5c11\uff0c\u8bb0\u5fc6B\u7ec6\u80de\u5728\u8f7b\u5ea6\u6837\u672c\u548c\u91cd\u5ea6\u6837\u672c\u4e2d\u663e\u793a\u51fa\u663e\u7740\u7684\u589e\u52a0\u3002 2.\u5728IgG\u8840\u6d46B\u7ec6\u80de\u7684\u5dee\u5f02\u57fa\u56e0\u5bcc\u96c6\u5206\u6790\u4e2d\uff0c\u5bcc\u96c6\u5230\u4e86\u51a0\u72b6\u75c5\u6bd2\u75c5\u2212covid\u221219\u3001\u7231\u6cfc\u65af\u5766\u2212Barr\u75c5\u6bd2\u611f\u67d3\u3001\u75b1\u75b9\u75c5\u6bd2\u611f\u67d3\u3001\u52a8\u8109\u7ca5\u6837\u786c\u5316\u7b49\u901a\u8def\u3002 PubMed\u641c\u7d22\u7ed3\u679c\uff1a \u7259\u5468\u708e\u4e0eICU\u5165\u9662\u98ce\u9669\u589e\u52a0\u3001\u9700\u8981\u8f85\u52a9\u901a\u6c14\u548cCOVID-19\u60a3\u8005\u6b7b\u4ea1\u4ee5\u53ca\u8840\u6db2\u4e2d\u4e0e\u75be\u75c5\u7ed3\u5c40\u6076\u5316\u76f8\u5173\u7684\u751f\u7269\u6807\u5fd7\u7269\u6c34\u5e73\u5347\u9ad8\u6709\u5173\u3002 \u4e9a\u7ec4\u5206\u6790\u7ed3\u679c\u8868\u660e\uff0cEB\u75c5\u6bd2\u4e0e\u7259\u5468\u708e\u7684\u76f8\u5173\u6027\u5728\u4e9a\u6d32\u3001\u6b27\u6d32\u548c\u7f8e\u56fd\u4eba\u7fa4\u4e2d\u5177\u6709\u663e\u8457\u6027\uff08P<0.001;P = 0.04;P = 0.003\uff0c\u4f46\u4e0d\u5305\u62ec\u975e\u6d32\u4eba\u53e3\uff08P = 0.29\uff09)\u3002 \u8fc7\u53bb\u4e94\u5e74\u53d1\u8868\u7684\u603b\u51716\u9879\u75c5\u4f8b\u5bf9\u7167\u548c\u961f\u5217\u7814\u7a76\u6d41\u884c\u75c5\u5b66\u7814\u7a76\uff0c\u8fd9\u4e9b\u7814\u7a76\u8868\u660e\uff0c\u4e0e\u6ca1\u6709\u7259\u5468\u708e\u6216\u4e0d\u592a\u4e25\u91cd\u7684\u7259\u5468\u708e\u7684\u60a3\u8005\u76f8\u6bd4\uff0c\u4e34\u5e8a\u8bca\u65ad\u7684\u7259\u5468\u708e\u6216\u66f4\u4e25\u91cd\u7684\u7259\u5468\u708e\u60a3\u8005\u53d1\u751f\u7b2c\u4e00\u6b21\u51a0\u72b6\u52a8\u8109\u4e8b\u4ef6\u7684\u98ce\u9669\u589e\u52a0\u3002 \u5728\u7f8e\u56fd\u5bf9\u7537\u6027\u9000\u4f0d\u519b\u4eba\u8fdb\u884c\u7684\u4e00\u9879\u524d\u77bb\u6027\u961f\u5217\u7814\u7a76\u62a5\u544a\uff0c\u7259\u5468\u708e\uff08\u901a\u8fc7\u653e\u5c04\u6210\u50cf\u9aa8\u8d28\u6d41\u5931\u7684\u4e25\u91cd\u7a0b\u5ea6\u6d4b\u91cf\uff09\u4e0ePAD\u572825\u81f330\u5e74\u7684\u968f\u8bbf\u671f\u5185\u7684\u53d1\u75c5\u7387\u4e4b\u95f4\u5b58\u5728\u6b63\u76f8\u5173\uff0c\u8c03\u6574\u540e\u7684OR\u4e3a2.3\u3002 \u7591\u95ee\uff1a\u5df2\u53d1\u8868\u7684\u5173\u4e8e\u65b0\u51a0\u3001EB\u3001\u75b1\u75b9\u3001\u5fc3\u8840\u7ba1\u75be\u75c5\u4e0e\u7259\u5468\u708e\u7684\u7814\u7a76\u5927\u591a\u96c6\u4e2d\u5728\u7edf\u8ba1\u5b66\u5173\u8054\u5206\u6790\u4e0a\uff0c\u5355\u7ec6\u80de\u6d4b\u5e8f\u662f\u5426\u5728\u5176\u7814\u7a76\u4e0a\u80fd\u591f\u66f4\u8fdb\u4e00\u6b65\uff1f \u5728\u68c0\u7d22\u5355\u7ec6\u80de\u8f6c\u5f55\u7ec4\u5e94\u7528\u4e8e\u4e0e\u5176\u4ed6\u75be\u75c5\u8054\u5408\u5206\u6790\u65f6\uff0c\u53ea\u53d1\u73b0\u4e86\u4e00\u7bc7\u6587\u732e\uff08\u53ef\u80fd\u662f\u6211\u641c\u7d22\u6709\u95ee\u9898\uff09\uff1a \u7531\u4e8e\u6ca1\u6709\u6743\u9650\uff0c\u53ea\u80fd\u770b\u5230\u8be5\u7bc7\u6587\u7ae0\u7684\u6458\u8981\uff1a\u5728\u53d6\u6837\u7684\u9009\u62e9\u65b9\u9762\uff0c\u4ed6\u9009\u62e9\u4e86\u5065\u5eb7\u4eba\u3001\u7259\u5468\u708e\u60a3\u8005\u548c\u60a3\u6709T2DM\u7684\u7259\u5468\u708e\u60a3\u8005\u7684\u7259\u9f88\u7ec4\u7ec7\uff0c\u7814\u7a76\u5176\u4e2d\u7684\u5de8\u566c\u7ec6\u80de\uff0c\u5468\u708e\u4e2d\u7684\u5927\u591a\u6570\u5de8\u566c\u7ec6\u80de\u8868\u8fbe\u5355\u6838\u7ec6\u80de\u8c31\u7cfb\u6807\u5fd7\u7269CD14\uff0c\u5728\u60a3\u6709T2DM\u7684\u7259\u5468\u708e\u60a3\u8005\u7684\u7259\u9f88\u5de8\u566c\u7ec6\u80de\u4e2d\u53d1\u73b0\u4e86RELA\uff08NF-\u03baB\u8f6c\u5f55\u56e0\u5b50\u590d\u5408\u7269\u7684\u4e9a\u57fa\uff09\u7684\u9ad8\u8868\u8fbe\u548c\u6fc0\u6d3b\u3002\u53d1\u73b0\u5de8\u566c\u7ec6\u80de\u7684\u5f02\u8d28\u6027\u548c\u9ad8\u708e\u75c7\u6fc0\u6d3b\u53ef\u80fd\u4e0e\u7259\u5468\u708e\u7684\u53d1\u75c5\u673a\u5236\u548c\u7ed3\u679c\u6709\u5173\uff0c\u5e76\u4e14\u5728T2DM\u60a3\u8005\u4e2d\u53ef\u80fd\u8fdb\u4e00\u6b65\u589e\u5f3a\u3002 \u8fd9\u8fb9\u4e3a\u4f55\u9009\u62e9\u5de8\u566c\u7ec6\u80de\uff1f \u6211\u4e4b\u524d\u5f97\u5230\u7684\u5bcc\u96c6\u5206\u6790\u7ed3\u679c\u90fd\u662f\u57fa\u4e8e\u7684IgG\u8840\u6d46B\u7ec6\u80de\uff0c\u662f\u5426\u53ef\u4ee5\u9009\u62e9\u8fd9\u7c7b\u7ec6\u80de\uff1f \u7531\u4e8e\u8fd9\u7c7b\u7ec6\u80de\u542b\u91cf\u5728\u5065\u5eb7\u548c\u60a3\u8005\u4e2d\u7684\u542b\u91cf\u5dee\u5f02\u5de8\u5927\uff0c\u7ed3\u679c\u662f\u5426\u53ef\u4fe1\uff1f\uff08\u7531\u4e8e\u4e4b\u524d\u7684\u6ce8\u91ca\u7ed3\u679c\u5e76\u4e0d\u662f\u5f88\u51c6\u786e\uff0c\u6211\u6682\u4e14\u5c1d\u8bd5\u4e86\u6ce8\u91ca\u7684\u4e0a\u76ae\u7ec6\u80de\uff0c\u5728\u4ed6\u7684\u5bcc\u96c6\u5206\u6790\u4e2d\u5f97\u5230\u4e86\u7c7b\u4f3c\u7684\u7ed3\u679c\uff09 \u518d\u8fdb\u4e00\u6b65\u4e9a\u7fa4\u7ec6\u5206\u4e2d\uff0c\u5206\u6210\u4e868\u7c7b\uff0c\u5065\u5eb7\u4eba\u7684\u7ec6\u80de\u7c7b\u578b\u4f3c\u4e4e\u53ea\u5728\u5176\u4e2d\u7684\u4e00\u7c07\u4e2d\uff0c\u5176\u4ed6\u7c07\u4e0e\u8fd9\u4e2a\u7c07\u4e4b\u95f4\u5dee\u5f02\u57fa\u56e0\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u836f\u7269\u9776\u57fa\u56e0\u3002\uff08\u4f46\u662f\u6211\u89c9\u5f97\u7528IgG\u8840\u6d46B\u7ec6\u80de\u662f\u6781\u5ea6\u4e0d\u5408\u7406\u7684\uff0c\u5065\u5eb7\u4eba\u4e2d\u7684\u7ec6\u80de\u6570\u5b9e\u5728\u592a\u5c11\uff0c\u9009\u8fd9\u7c7b\u7ec6\u80de\u505a\u4e3b\u8981\u662f\u5bf9\u5176\u6ce8\u91ca\u6bd4\u8f83\u786e\u4fe1\uff09","title":"summary"}]}